
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 02 23:40:42 COT 2021
//----------------------------------------------------

package anaa;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 02 23:40:42 COT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\020\007\000\002\020" +
    "\010\000\002\020\011\000\002\020\010\000\002\020\007" +
    "\000\002\020\010\000\002\020\010\000\002\020\007\000" +
    "\002\002\004\000\002\002\003\000\002\002\004\000\002" +
    "\002\003\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\003\000\002\002\005\000\002\002\004" +
    "\000\002\002\003\000\002\002\004\000\002\002\003\000" +
    "\002\002\003\000\002\003\005\000\002\003\013\000\002" +
    "\003\012\000\002\003\006\000\002\003\010\000\002\003" +
    "\010\000\002\003\010\000\002\003\007\000\002\003\007" +
    "\000\002\003\010\000\002\003\006\000\002\003\014\000" +
    "\002\003\013\000\002\021\012\000\002\021\011\000\002" +
    "\021\010\000\002\021\007\000\002\021\007\000\002\021" +
    "\006\000\002\021\013\000\002\021\013\000\002\021\012" +
    "\000\002\021\012\000\002\021\011\000\002\021\011\000" +
    "\002\021\010\000\002\021\010\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\007\004\000\002\007" +
    "\003\000\002\007\005\000\002\007\006\000\002\005\011" +
    "\000\002\012\012\000\002\016\006\000\002\016\007\000" +
    "\002\016\010\000\002\016\011\000\002\016\006\000\002" +
    "\016\007\000\002\016\010\000\002\016\011\000\002\022" +
    "\005\000\002\022\004\000\002\015\003\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\006\000" +
    "\002\015\007\000\002\006\015\000\002\011\011\000\002" +
    "\013\013\000\002\014\011\000\002\017\012\000\002\017" +
    "\011\000\002\004\005\000\002\004\004\000\002\004\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\014\031\007\033\006\034\011\036\005\040" +
    "\010\001\002\000\004\002\u0106\001\002\000\004\046\u0102" +
    "\001\002\000\004\046\376\001\002\000\004\046\372\001" +
    "\002\000\012\031\347\033\346\034\350\036\345\001\002" +
    "\000\004\036\012\001\002\000\004\046\013\001\002\000" +
    "\004\026\014\001\002\000\024\007\030\012\036\013\015" +
    "\015\032\040\034\041\033\042\026\043\031\046\022\001" +
    "\002\000\004\024\312\001\002\000\034\007\ufff1\011\ufff1" +
    "\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\027\ufff1\030" +
    "\ufff1\040\ufff1\042\ufff1\043\ufff1\046\ufff1\001\002\000\026" +
    "\007\030\011\066\012\036\013\015\015\032\027\311\040" +
    "\034\042\026\043\031\046\061\001\002\000\034\007\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\027" +
    "\ufff7\030\ufff7\040\ufff7\042\ufff7\043\ufff7\046\ufff7\001\002" +
    "\000\034\007\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015" +
    "\uffec\016\uffec\027\uffec\030\uffec\040\uffec\042\uffec\043\uffec" +
    "\046\uffec\001\002\000\006\024\303\046\157\001\002\000" +
    "\034\007\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\016\ufff5\027\ufff5\030\ufff5\040\ufff5\042\ufff5\043\ufff5\046" +
    "\ufff5\001\002\000\012\005\250\006\104\041\247\046\103" +
    "\001\002\000\034\007\ufff3\011\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\016\ufff3\027\ufff3\030\ufff3\040\ufff3\042\ufff3" +
    "\043\ufff3\046\ufff3\001\002\000\012\005\uffce\006\uffce\041" +
    "\uffce\046\uffce\001\002\000\034\007\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\016\uffeb\027\uffeb\030\uffeb\040" +
    "\uffeb\042\uffeb\043\uffeb\046\uffeb\001\002\000\004\024\235" +
    "\001\002\000\012\005\uffcd\006\uffcd\041\uffcd\046\uffcd\001" +
    "\002\000\004\024\207\001\002\000\004\046\172\001\002" +
    "\000\012\005\uffcf\006\uffcf\041\uffcf\046\uffcf\001\002\000" +
    "\034\007\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee" +
    "\016\uffee\027\uffee\030\uffee\040\uffee\042\uffee\043\uffee\046" +
    "\uffee\001\002\000\004\024\037\001\002\000\006\023\041" +
    "\046\042\001\002\000\004\025\053\001\002\000\006\025" +
    "\uffbc\044\uffbc\001\002\000\004\022\043\001\002\000\012" +
    "\004\045\023\046\046\047\047\044\001\002\000\006\025" +
    "\uffba\044\uffba\001\002\000\006\004\050\046\051\001\002" +
    "\000\006\025\uffbb\044\uffbb\001\002\000\006\025\uffb9\044" +
    "\uffb9\001\002\000\006\025\uffb8\044\uffb8\001\002\000\004" +
    "\004\052\001\002\000\006\025\uffb7\044\uffb7\001\002\000" +
    "\004\026\054\001\002\000\024\007\030\012\036\013\015" +
    "\015\032\040\034\041\033\042\026\043\031\046\022\001" +
    "\002\000\026\007\030\011\066\012\036\013\015\015\032" +
    "\027\067\040\034\042\026\043\031\046\061\001\002\000" +
    "\034\007\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2" +
    "\016\ufff2\027\ufff2\030\ufff2\040\ufff2\042\ufff2\043\ufff2\046" +
    "\ufff2\001\002\000\034\007\ufff8\011\ufff8\012\ufff8\013\ufff8" +
    "\014\ufff8\015\ufff8\016\ufff8\027\ufff8\030\ufff8\040\ufff8\042" +
    "\ufff8\043\ufff8\046\ufff8\001\002\000\034\007\uffed\011\uffed" +
    "\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\027\uffed\030" +
    "\uffed\040\uffed\042\uffed\043\uffed\046\uffed\001\002\000\004" +
    "\046\157\001\002\000\034\007\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\027\ufff6\030\ufff6\040\ufff6" +
    "\042\ufff6\043\ufff6\046\ufff6\001\002\000\010\005\102\006" +
    "\104\046\103\001\002\000\034\007\ufff4\011\ufff4\012\ufff4" +
    "\013\ufff4\014\ufff4\015\ufff4\016\ufff4\027\ufff4\030\ufff4\040" +
    "\ufff4\042\ufff4\043\ufff4\046\ufff4\001\002\000\004\011\066" +
    "\001\002\000\004\026\071\001\002\000\034\007\uffb5\011" +
    "\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\027\uffb5" +
    "\030\uffb5\040\uffb5\042\uffb5\043\uffb5\046\uffb5\001\002\000" +
    "\034\007\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef" +
    "\016\uffef\027\uffef\030\uffef\040\uffef\042\uffef\043\uffef\046" +
    "\uffef\001\002\000\024\007\030\012\036\013\015\015\032" +
    "\040\034\041\033\042\026\043\031\046\022\001\002\000" +
    "\026\007\030\011\066\012\036\013\015\015\032\027\073" +
    "\040\034\042\026\043\031\046\061\001\002\000\004\012" +
    "\074\001\002\000\004\024\075\001\002\000\006\023\041" +
    "\046\042\001\002\000\004\025\077\001\002\000\004\044" +
    "\100\001\002\000\034\007\uffb4\011\uffb4\012\uffb4\013\uffb4" +
    "\014\uffb4\015\uffb4\016\uffb4\027\uffb4\030\uffb4\040\uffb4\042" +
    "\uffb4\043\uffb4\046\uffb4\001\002\000\034\007\ufff0\011\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\027\ufff0\030" +
    "\ufff0\040\ufff0\042\ufff0\043\ufff0\046\ufff0\001\002\000\006" +
    "\021\142\046\143\001\002\000\004\046\120\001\002\000" +
    "\004\046\105\001\002\000\006\017\107\032\106\001\002" +
    "\000\004\004\110\001\002\000\004\004\110\001\002\000" +
    "\006\004\113\046\114\001\002\000\004\044\112\001\002" +
    "\000\034\007\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\027\uffe1\030\uffe1\040\uffe1\042\uffe1\043\uffe1" +
    "\046\uffe1\001\002\000\006\044\uffbd\045\uffbd\001\002\000" +
    "\004\004\115\001\002\000\006\044\uffbe\045\uffbe\001\002" +
    "\000\004\044\117\001\002\000\034\007\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\027\uffe4\030\uffe4" +
    "\040\uffe4\042\uffe4\043\uffe4\046\uffe4\001\002\000\006\017" +
    "\122\044\121\001\002\000\034\007\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\014\uffe0\015\uffe0\016\uffe0\027\uffe0\030\uffe0\040" +
    "\uffe0\042\uffe0\043\uffe0\046\uffe0\001\002\000\004\035\123" +
    "\001\002\000\004\046\124\001\002\000\004\024\125\001" +
    "\002\000\010\005\126\025\130\046\131\001\002\000\004" +
    "\046\137\001\002\000\004\025\135\001\002\000\004\044" +
    "\134\001\002\000\006\025\uffcb\037\132\001\002\000\006" +
    "\005\126\046\131\001\002\000\004\025\uffca\001\002\000" +
    "\034\007\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\016\uffde\027\uffde\030\uffde\040\uffde\042\uffde\043\uffde\046" +
    "\uffde\001\002\000\004\044\136\001\002\000\034\007\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\027" +
    "\uffdf\030\uffdf\040\uffdf\042\uffdf\043\uffdf\046\uffdf\001\002" +
    "\000\006\025\uffcc\037\140\001\002\000\006\005\126\046" +
    "\131\001\002\000\004\025\uffc9\001\002\000\004\046\155" +
    "\001\002\000\012\017\147\021\146\032\145\044\144\001" +
    "\002\000\034\007\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\027\uffe7\030\uffe7\040\uffe7\042\uffe7\043" +
    "\uffe7\046\uffe7\001\002\000\004\047\153\001\002\000\004" +
    "\044\152\001\002\000\004\047\150\001\002\000\004\044" +
    "\151\001\002\000\034\007\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\027\uffe6\030\uffe6\040\uffe6\042" +
    "\uffe6\043\uffe6\046\uffe6\001\002\000\034\007\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\027\uffe3\030" +
    "\uffe3\040\uffe3\042\uffe3\043\uffe3\046\uffe3\001\002\000\004" +
    "\044\154\001\002\000\034\007\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\016\uffe5\027\uffe5\030\uffe5\040\uffe5" +
    "\042\uffe5\043\uffe5\046\uffe5\001\002\000\004\044\156\001" +
    "\002\000\034\007\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\027\uffe2\030\uffe2\040\uffe2\042\uffe2\043" +
    "\uffe2\046\uffe2\001\002\000\006\017\161\044\160\001\002" +
    "\000\034\007\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015" +
    "\uffea\016\uffea\027\uffea\030\uffea\040\uffea\042\uffea\043\uffea" +
    "\046\uffea\001\002\000\004\035\162\001\002\000\004\046" +
    "\163\001\002\000\004\024\164\001\002\000\010\005\126" +
    "\025\166\046\131\001\002\000\004\025\170\001\002\000" +
    "\004\044\167\001\002\000\034\007\uffe8\011\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\027\uffe8\030\uffe8\040" +
    "\uffe8\042\uffe8\043\uffe8\046\uffe8\001\002\000\004\044\171" +
    "\001\002\000\034\007\uffe9\011\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\027\uffe9\030\uffe9\040\uffe9\042\uffe9" +
    "\043\uffe9\046\uffe9\001\002\000\004\024\173\001\002\000" +
    "\010\005\126\025\175\046\131\001\002\000\004\025\202" +
    "\001\002\000\006\026\177\044\176\001\002\000\034\007" +
    "\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda" +
    "\027\uffda\030\uffda\040\uffda\042\uffda\043\uffda\046\uffda\001" +
    "\002\000\024\007\030\012\036\013\015\015\032\040\034" +
    "\041\033\042\026\043\031\046\022\001\002\000\026\007" +
    "\030\011\066\012\036\013\015\015\032\027\201\040\034" +
    "\042\026\043\031\046\061\001\002\000\034\007\uffdc\011" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\027\uffdc" +
    "\030\uffdc\040\uffdc\042\uffdc\043\uffdc\046\uffdc\001\002\000" +
    "\006\026\204\044\203\001\002\000\034\007\uffdb\011\uffdb" +
    "\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\027\uffdb\030" +
    "\uffdb\040\uffdb\042\uffdb\043\uffdb\046\uffdb\001\002\000\024" +
    "\007\030\012\036\013\015\015\032\040\034\041\033\042" +
    "\026\043\031\046\022\001\002\000\026\007\030\011\066" +
    "\012\036\013\015\015\032\027\206\040\034\042\026\043" +
    "\031\046\061\001\002\000\034\007\uffdd\011\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\016\uffdd\027\uffdd\030\uffdd\040" +
    "\uffdd\042\uffdd\043\uffdd\046\uffdd\001\002\000\004\046\210" +
    "\001\002\000\004\025\211\001\002\000\004\026\212\001" +
    "\002\000\004\016\213\001\002\000\006\004\110\047\217" +
    "\001\002\000\004\030\215\001\002\000\004\045\216\001" +
    "\002\000\034\007\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7" +
    "\015\uffc7\016\uffc7\027\uffc7\030\uffc7\040\uffc7\042\uffc7\043" +
    "\uffc7\046\uffc7\001\002\000\004\045\227\001\002\000\004" +
    "\045\221\001\002\000\024\007\030\012\036\013\015\015" +
    "\032\040\034\041\033\042\026\043\031\046\022\001\002" +
    "\000\032\007\030\011\066\012\036\013\015\014\223\015" +
    "\032\016\213\030\uffc6\040\034\042\026\043\031\046\061" +
    "\001\002\000\004\044\225\001\002\000\004\030\uffc5\001" +
    "\002\000\006\016\213\030\uffc4\001\002\000\004\030\uffc3" +
    "\001\002\000\024\007\030\012\036\013\015\015\032\040" +
    "\034\041\033\042\026\043\031\046\022\001\002\000\032" +
    "\007\030\011\066\012\036\013\015\014\231\015\032\016" +
    "\213\030\uffc2\040\034\042\026\043\031\046\061\001\002" +
    "\000\004\044\233\001\002\000\004\030\uffc1\001\002\000" +
    "\006\016\213\030\uffc0\001\002\000\004\030\uffbf\001\002" +
    "\000\006\023\041\046\042\001\002\000\004\025\237\001" +
    "\002\000\004\026\240\001\002\000\024\007\030\012\036" +
    "\013\015\015\032\040\034\041\033\042\026\043\031\046" +
    "\022\001\002\000\026\007\030\011\066\012\036\013\015" +
    "\015\032\027\242\040\034\042\026\043\031\046\061\001" +
    "\002\000\036\007\uffc8\010\243\011\uffc8\012\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\016\uffc8\027\uffc8\030\uffc8\040\uffc8\042" +
    "\uffc8\043\uffc8\046\uffc8\001\002\000\004\026\244\001\002" +
    "\000\024\007\030\012\036\013\015\015\032\040\034\041" +
    "\033\042\026\043\031\046\022\001\002\000\026\007\030" +
    "\011\066\012\036\013\015\015\032\027\246\040\034\042" +
    "\026\043\031\046\061\001\002\000\034\007\uffb6\011\uffb6" +
    "\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\027\uffb6\030" +
    "\uffb6\040\uffb6\042\uffb6\043\uffb6\046\uffb6\001\002\000\004" +
    "\046\266\001\002\000\006\021\142\046\251\001\002\000" +
    "\014\017\147\021\146\024\252\032\145\044\144\001\002" +
    "\000\010\005\126\025\254\046\131\001\002\000\004\025" +
    "\261\001\002\000\006\026\256\044\255\001\002\000\034" +
    "\007\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\027\uffd1\030\uffd1\040\uffd1\042\uffd1\043\uffd1\046\uffd1" +
    "\001\002\000\024\007\030\012\036\013\015\015\032\040" +
    "\034\041\033\042\026\043\031\046\022\001\002\000\026" +
    "\007\030\011\066\012\036\013\015\015\032\027\260\040" +
    "\034\042\026\043\031\046\061\001\002\000\034\007\uffd5" +
    "\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\027" +
    "\uffd5\030\uffd5\040\uffd5\042\uffd5\043\uffd5\046\uffd5\001\002" +
    "\000\006\026\263\044\262\001\002\000\034\007\uffd3\011" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\027\uffd3" +
    "\030\uffd3\040\uffd3\042\uffd3\043\uffd3\046\uffd3\001\002\000" +
    "\024\007\030\012\036\013\015\015\032\040\034\041\033" +
    "\042\026\043\031\046\022\001\002\000\026\007\030\011" +
    "\066\012\036\013\015\015\032\027\265\040\034\042\026" +
    "\043\031\046\061\001\002\000\034\007\uffd7\011\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\027\uffd7\030\uffd7" +
    "\040\uffd7\042\uffd7\043\uffd7\046\uffd7\001\002\000\004\024" +
    "\267\001\002\000\010\005\126\025\271\046\131\001\002" +
    "\000\004\025\276\001\002\000\006\026\273\044\272\001" +
    "\002\000\034\007\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\027\uffd0\030\uffd0\040\uffd0\042\uffd0\043" +
    "\uffd0\046\uffd0\001\002\000\024\007\030\012\036\013\015" +
    "\015\032\040\034\041\033\042\026\043\031\046\022\001" +
    "\002\000\026\007\030\011\066\012\036\013\015\015\032" +
    "\027\275\040\034\042\026\043\031\046\061\001\002\000" +
    "\034\007\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4" +
    "\016\uffd4\027\uffd4\030\uffd4\040\uffd4\042\uffd4\043\uffd4\046" +
    "\uffd4\001\002\000\006\026\300\044\277\001\002\000\034" +
    "\007\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016" +
    "\uffd2\027\uffd2\030\uffd2\040\uffd2\042\uffd2\043\uffd2\046\uffd2" +
    "\001\002\000\024\007\030\012\036\013\015\015\032\040" +
    "\034\041\033\042\026\043\031\046\022\001\002\000\026" +
    "\007\030\011\066\012\036\013\015\015\032\027\302\040" +
    "\034\042\026\043\031\046\061\001\002\000\034\007\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\027" +
    "\uffd6\030\uffd6\040\uffd6\042\uffd6\043\uffd6\046\uffd6\001\002" +
    "\000\010\005\126\025\305\046\131\001\002\000\004\025" +
    "\307\001\002\000\004\044\306\001\002\000\034\007\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\027" +
    "\uffd8\030\uffd8\040\uffd8\042\uffd8\043\uffd8\046\uffd8\001\002" +
    "\000\004\044\310\001\002\000\034\007\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\027\uffd9\030\uffd9" +
    "\040\uffd9\042\uffd9\043\uffd9\046\uffd9\001\002\000\004\002" +
    "\ufffd\001\002\000\006\005\314\046\315\001\002\000\004" +
    "\025\341\001\002\000\004\046\332\001\002\000\004\017" +
    "\316\001\002\000\004\047\317\001\002\000\004\044\320" +
    "\001\002\000\006\023\041\046\042\001\002\000\004\044" +
    "\322\001\002\000\006\020\323\046\325\001\002\000\004" +
    "\046\331\001\002\000\004\025\uffb1\001\002\000\006\020" +
    "\326\032\327\001\002\000\004\025\uffaf\001\002\000\004" +
    "\047\330\001\002\000\004\025\uffb0\001\002\000\004\025" +
    "\uffae\001\002\000\004\017\333\001\002\000\004\047\334" +
    "\001\002\000\004\044\335\001\002\000\006\023\041\046" +
    "\042\001\002\000\004\044\337\001\002\000\006\020\323" +
    "\046\325\001\002\000\004\025\uffb2\001\002\000\004\026" +
    "\342\001\002\000\024\007\030\012\036\013\015\015\032" +
    "\040\034\041\033\042\026\043\031\046\022\001\002\000" +
    "\026\007\030\011\066\012\036\013\015\015\032\027\344" +
    "\040\034\042\026\043\031\046\061\001\002\000\034\007" +
    "\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3" +
    "\027\uffb3\030\uffb3\040\uffb3\042\uffb3\043\uffb3\046\uffb3\001" +
    "\002\000\004\046\366\001\002\000\004\046\362\001\002" +
    "\000\004\046\356\001\002\000\004\036\351\001\002\000" +
    "\004\046\352\001\002\000\004\026\353\001\002\000\024" +
    "\007\030\012\036\013\015\015\032\040\034\041\033\042" +
    "\026\043\031\046\022\001\002\000\026\007\030\011\066" +
    "\012\036\013\015\015\032\027\355\040\034\042\026\043" +
    "\031\046\061\001\002\000\004\002\ufffe\001\002\000\004" +
    "\026\357\001\002\000\024\007\030\012\036\013\015\015" +
    "\032\040\034\041\033\042\026\043\031\046\022\001\002" +
    "\000\026\007\030\011\066\012\036\013\015\015\032\027" +
    "\361\040\034\042\026\043\031\046\061\001\002\000\004" +
    "\002\ufffa\001\002\000\004\026\363\001\002\000\024\007" +
    "\030\012\036\013\015\015\032\040\034\041\033\042\026" +
    "\043\031\046\022\001\002\000\026\007\030\011\066\012" +
    "\036\013\015\015\032\027\365\040\034\042\026\043\031" +
    "\046\061\001\002\000\004\002\ufffb\001\002\000\004\026" +
    "\367\001\002\000\024\007\030\012\036\013\015\015\032" +
    "\040\034\041\033\042\026\043\031\046\022\001\002\000" +
    "\026\007\030\011\066\012\036\013\015\015\032\027\371" +
    "\040\034\042\026\043\031\046\061\001\002\000\004\002" +
    "\uffff\001\002\000\004\026\373\001\002\000\024\007\030" +
    "\012\036\013\015\015\032\040\034\041\033\042\026\043" +
    "\031\046\022\001\002\000\026\007\030\011\066\012\036" +
    "\013\015\015\032\027\375\040\034\042\026\043\031\046" +
    "\061\001\002\000\004\002\ufff9\001\002\000\004\026\377" +
    "\001\002\000\024\007\030\012\036\013\015\015\032\040" +
    "\034\041\033\042\026\043\031\046\022\001\002\000\026" +
    "\007\030\011\066\012\036\013\015\015\032\027\u0101\040" +
    "\034\042\026\043\031\046\061\001\002\000\004\002\ufffc" +
    "\001\002\000\004\026\u0103\001\002\000\024\007\030\012" +
    "\036\013\015\015\032\040\034\041\033\042\026\043\031" +
    "\046\022\001\002\000\026\007\030\011\066\012\036\013" +
    "\015\015\032\027\u0105\040\034\042\026\043\031\046\061" +
    "\001\002\000\004\002\000\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\004\020\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\002\016\003\017\005\022\006\024\010\023" +
    "\011\015\012\020\014\034\021\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\056\005\061\006\063" +
    "\010\062\011\055\012\057\013\064\014\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\002\054" +
    "\003\017\005\022\006\024\010\023\011\015\012\020\014" +
    "\034\021\026\001\001\000\022\003\056\005\061\006\063" +
    "\010\062\011\055\012\057\013\064\014\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\002\071\003\017\005" +
    "\022\006\024\010\023\011\015\012\020\014\034\021\026" +
    "\001\001\000\022\003\056\005\061\006\063\010\062\011" +
    "\055\012\057\013\064\014\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\115\001\001\000\004\022\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\002\177\003\017\005\022\006\024\010\023\011\015\012" +
    "\020\014\034\021\026\001\001\000\022\003\056\005\061" +
    "\006\063\010\062\011\055\012\057\013\064\014\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\002\204\003\017\005\022\006\024\010\023\011" +
    "\015\012\020\014\034\021\026\001\001\000\022\003\056" +
    "\005\061\006\063\010\062\011\055\012\057\013\064\014" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\213\001\001\000" +
    "\004\022\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\002\221\003\017\005\022\006\024\010\023\011\015" +
    "\012\020\014\034\021\026\001\001\000\024\003\056\005" +
    "\061\006\063\010\062\011\055\012\057\013\064\014\067" +
    "\016\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\225\001\001\000\002\001\001\000\024\002\227" +
    "\003\017\005\022\006\024\010\023\011\015\012\020\014" +
    "\034\021\026\001\001\000\024\003\056\005\061\006\063" +
    "\010\062\011\055\012\057\013\064\014\067\016\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\233" +
    "\001\001\000\002\001\001\000\004\015\235\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\002\240\003\017" +
    "\005\022\006\024\010\023\011\015\012\020\014\034\021" +
    "\026\001\001\000\022\003\056\005\061\006\063\010\062" +
    "\011\055\012\057\013\064\014\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\002\244\003\017\005\022" +
    "\006\024\010\023\011\015\012\020\014\034\021\026\001" +
    "\001\000\022\003\056\005\061\006\063\010\062\011\055" +
    "\012\057\013\064\014\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\002\256\003\017\005\022\006\024" +
    "\010\023\011\015\012\020\014\034\021\026\001\001\000" +
    "\022\003\056\005\061\006\063\010\062\011\055\012\057" +
    "\013\064\014\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\002\263\003\017\005\022" +
    "\006\024\010\023\011\015\012\020\014\034\021\026\001" +
    "\001\000\022\003\056\005\061\006\063\010\062\011\055" +
    "\012\057\013\064\014\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\267\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\002\273\003" +
    "\017\005\022\006\024\010\023\011\015\012\020\014\034" +
    "\021\026\001\001\000\022\003\056\005\061\006\063\010" +
    "\062\011\055\012\057\013\064\014\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\002" +
    "\300\003\017\005\022\006\024\010\023\011\015\012\020" +
    "\014\034\021\026\001\001\000\022\003\056\005\061\006" +
    "\063\010\062\011\055\012\057\013\064\014\067\001\001" +
    "\000\002\001\001\000\004\007\303\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\312\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\320\001" +
    "\001\000\002\001\001\000\004\004\323\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\335\001\001\000\002\001\001\000\004\004\337" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\002" +
    "\342\003\017\005\022\006\024\010\023\011\015\012\020" +
    "\014\034\021\026\001\001\000\022\003\056\005\061\006" +
    "\063\010\062\011\055\012\057\013\064\014\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\002\353\003\017\005\022\006\024\010" +
    "\023\011\015\012\020\014\034\021\026\001\001\000\022" +
    "\003\056\005\061\006\063\010\062\011\055\012\057\013" +
    "\064\014\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\002\357\003\017\005\022\006\024\010\023\011" +
    "\015\012\020\014\034\021\026\001\001\000\022\003\056" +
    "\005\061\006\063\010\062\011\055\012\057\013\064\014" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\002\363\003\017\005\022\006\024\010\023\011\015\012" +
    "\020\014\034\021\026\001\001\000\022\003\056\005\061" +
    "\006\063\010\062\011\055\012\057\013\064\014\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\002\367" +
    "\003\017\005\022\006\024\010\023\011\015\012\020\014" +
    "\034\021\026\001\001\000\022\003\056\005\061\006\063" +
    "\010\062\011\055\012\057\013\064\014\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\002\373\003\017" +
    "\005\022\006\024\010\023\011\015\012\020\014\034\021" +
    "\026\001\001\000\022\003\056\005\061\006\063\010\062" +
    "\011\055\012\057\013\064\014\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\002\377\003\017\005\022" +
    "\006\024\010\023\011\015\012\020\014\034\021\026\001" +
    "\001\000\022\003\056\005\061\006\063\010\062\011\055" +
    "\012\057\013\064\014\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\002\u0103\003\017\005\022\006\024" +
    "\010\023\011\015\012\020\014\034\021\026\001\001\000" +
    "\022\003\056\005\061\006\063\010\062\011\055\012\057" +
    "\013\064\014\067\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION_FOR ::= Operador_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION_FOR ::= Identificador Operador_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION_FOR ::= Identificador Operador_asignacion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA_FOR ::= Identificador Igual Numero PuntoyComa SENTENCIA_BOOLEANA PuntoyComa DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA_FOR ::= Tipo_dato Identificador Igual Numero PuntoyComa SENTENCIA_BOOLEANA PuntoyComa DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FOR ::= For Parentesis_apertura SENTENCIA_FOR Parentesis_cierre Llave_apertura SENTENCIA Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DO_WHILE ::= Do Llave_apertura SENTENCIA Llave_cierre While Parentesis_apertura SENTENCIA_BOOLEANA Parentesis_cierre PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // WHILE ::= While Parentesis_apertura SENTENCIA_BOOLEANA Parentesis_cierre Llave_apertura SENTENCIA Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IF_ELSE ::= If Parentesis_apertura SENTENCIA_BOOLEANA Parentesis_cierre Llave_apertura SENTENCIA Llave_cierre Else Llave_apertura SENTENCIA Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA_BOOLEANA ::= Identificador Operador_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_BOOLEANA ::= Identificador Operador_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_BOOLEANA ::= Identificador Operador_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_BOOLEANA ::= Identificador Operador_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_BOOLEANA ::= Identificador Operador_relacional Dato_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_BOOLEANA ::= Dato_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // STRING ::= Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRING",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // STRING ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRING",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CASE ::= Case Numero Dospuntos SENTENCIA Break PuntoyComa CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CASE ::= Case Numero Dospuntos SENTENCIA Break PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CASE ::= Case Numero Dospuntos SENTENCIA CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CASE ::= Case Numero Dospuntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CASE ::= Case STRING Dospuntos SENTENCIA Break PuntoyComa CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CASE ::= Case STRING Dospuntos SENTENCIA Break PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CASE ::= Case STRING Dospuntos SENTENCIA CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CASE ::= Case STRING Dospuntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SWITCH ::= Switch Parentesis_apertura Identificador Parentesis_cierre Llave_apertura CASE Default Dospuntos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IF ::= If Parentesis_apertura SENTENCIA_BOOLEANA Parentesis_cierre Llave_apertura SENTENCIA Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PARAMETRO ::= Tipo_dato Identificador Coma PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PARAMETRO ::= Identificador Coma PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PARAMETRO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARAMETRO ::= Tipo_dato Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SEGURIDAD ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEGURIDAD",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SEGURIDAD ::= Protected 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEGURIDAD",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SEGURIDAD ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEGURIDAD",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // METODO ::= SEGURIDAD Void Identificador Parentesis_apertura Parentesis_cierre PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // METODO ::= SEGURIDAD Tipo_dato Identificador Parentesis_apertura Parentesis_cierre PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // METODO ::= SEGURIDAD Void Identificador Parentesis_apertura PARAMETRO Parentesis_cierre PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // METODO ::= SEGURIDAD Tipo_dato Identificador Parentesis_apertura PARAMETRO Parentesis_cierre PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // METODO ::= SEGURIDAD Void Identificador Parentesis_apertura Parentesis_cierre Llave_apertura SENTENCIA Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // METODO ::= SEGURIDAD Tipo_dato Identificador Parentesis_apertura Parentesis_cierre Llave_apertura SENTENCIA Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // METODO ::= SEGURIDAD Void Identificador Parentesis_apertura PARAMETRO Parentesis_cierre Llave_apertura SENTENCIA Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // METODO ::= SEGURIDAD Tipo_dato Identificador Parentesis_apertura PARAMETRO Parentesis_cierre Llave_apertura SENTENCIA Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // METODO ::= Identificador Parentesis_apertura Parentesis_cierre PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // METODO ::= Identificador Parentesis_apertura PARAMETRO Parentesis_cierre PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // METODO ::= Void Identificador Parentesis_apertura Parentesis_cierre PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // METODO ::= Void Identificador Parentesis_apertura PARAMETRO Parentesis_cierre PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // METODO ::= Void Identificador Parentesis_apertura Parentesis_cierre Llave_apertura SENTENCIA Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // METODO ::= Void Identificador Parentesis_apertura PARAMETRO Parentesis_cierre Llave_apertura SENTENCIA Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= SEGURIDAD Identificador Identificador Igual New Identificador Parentesis_apertura Parentesis_cierre PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= SEGURIDAD Identificador Identificador Igual New Identificador Parentesis_apertura PARAMETRO Parentesis_cierre PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= SEGURIDAD Identificador Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= SEGURIDAD Cadena Identificador Igual STRING PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= SEGURIDAD Tipo_dato Operador_unario Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= SEGURIDAD Tipo_dato Identificador Operador_unario PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= SEGURIDAD Cadena Identificador Operador_asignacion STRING PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= SEGURIDAD Tipo_dato Identificador Operador_asignacion Numero PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= SEGURIDAD Tipo_dato Identificador Igual Numero PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= SEGURIDAD Tipo_dato Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Identificador Identificador Igual New Identificador Parentesis_apertura Parentesis_cierre PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Identificador Identificador Igual New Identificador Parentesis_apertura PARAMETRO Parentesis_cierre PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Identificador Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO_CLASS ::= Enum Identificador Llave_apertura SENTENCIA Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_CLASS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO_CLASS ::= Public Enum Identificador Llave_apertura SENTENCIA Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_CLASS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO_CLASS ::= Public Interface Identificador Llave_apertura SENTENCIA Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_CLASS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO_CLASS ::= Interface Identificador Llave_apertura SENTENCIA Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_CLASS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO_CLASS ::= Abstract Class Identificador Llave_apertura SENTENCIA Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_CLASS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO_CLASS ::= Public Abstract Class Identificador Llave_apertura SENTENCIA Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_CLASS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO_CLASS ::= Public Class Identificador Llave_apertura SENTENCIA Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_CLASS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO_CLASS ::= Class Identificador Llave_apertura SENTENCIA Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_CLASS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO_CLASS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

