
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 15 16:16:35 COT 2021
//----------------------------------------------------

package anaa;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 15 16:16:35 COT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\304\000\002\002\004\000\002\002\003\000\002\002" +
    "\005\000\002\002\004\000\002\002\005\000\002\002\003" +
    "\000\002\002\004\000\002\002\003\000\002\011\010\000" +
    "\002\011\007\000\002\011\011\000\002\011\010\000\002" +
    "\010\007\000\002\010\006\000\002\010\010\000\002\010" +
    "\007\000\002\023\012\000\002\023\011\000\002\023\011" +
    "\000\002\023\010\000\002\023\012\000\002\023\011\000" +
    "\002\030\004\000\002\030\004\000\002\030\004\000\002" +
    "\030\004\000\002\022\005\000\002\022\005\000\002\022" +
    "\004\000\002\027\004\000\002\027\004\000\002\027\004" +
    "\000\002\027\004\000\002\027\006\000\002\027\006\000" +
    "\002\027\006\000\002\027\006\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\005\000\002\003\004\000\002\003\003\000" +
    "\002\003\003\000\002\003\004\000\002\004\004\000\002" +
    "\004\006\000\002\004\005\000\002\004\007\000\002\004" +
    "\007\000\002\004\006\000\002\004\006\000\002\004\010" +
    "\000\002\004\005\000\002\004\005\000\002\004\007\000" +
    "\002\004\007\000\002\004\006\000\002\004\006\000\002" +
    "\004\007\000\002\004\010\000\002\004\005\000\002\004" +
    "\007\000\002\004\005\000\002\004\007\000\002\004\007" +
    "\000\002\004\007\000\002\004\006\000\002\004\006\000" +
    "\002\004\010\000\002\004\006\000\002\004\007\000\002" +
    "\004\005\000\002\004\007\000\002\004\007\000\002\004" +
    "\006\000\002\004\006\000\002\004\007\000\002\004\010" +
    "\000\002\004\005\000\002\004\007\000\002\004\005\000" +
    "\002\004\007\000\002\004\007\000\002\004\006\000\002" +
    "\004\006\000\002\004\007\000\002\004\010\000\002\004" +
    "\005\000\002\004\007\000\002\004\005\000\002\004\010" +
    "\000\002\004\007\000\002\004\006\000\002\004\010\000" +
    "\002\004\010\000\002\004\011\000\002\004\011\000\002" +
    "\004\005\000\002\004\010\000\002\004\007\000\002\004" +
    "\011\000\002\004\011\000\002\004\006\000\002\004\006" +
    "\000\002\004\010\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\020\012\000\002\020\011\000\002" +
    "\020\011\000\002\020\011\000\002\020\007\000\002\020" +
    "\007\000\002\020\007\000\002\020\007\000\002\020\007" +
    "\000\002\020\007\000\002\020\007\000\002\020\007\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\011\000\002\020\011\000\002\020" +
    "\011\000\002\020\011\000\002\020\007\000\002\020\007" +
    "\000\002\020\007\000\002\020\007\000\002\020\007\000" +
    "\002\020\007\000\002\020\007\000\002\020\007\000\002" +
    "\012\012\000\002\012\011\000\002\012\011\000\002\012" +
    "\011\000\002\012\007\000\002\012\007\000\002\012\007" +
    "\000\002\012\007\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\007\000\002" +
    "\012\007\000\002\012\007\000\002\012\007\000\002\006" +
    "\011\000\002\006\014\000\002\016\003\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\006\000\002\016\007\000\002\007\015\000\002" +
    "\013\011\000\002\014\013\000\002\015\011\000\002\017" +
    "\012\000\002\017\011\000\002\005\005\000\002\005\004" +
    "\000\002\005\004\000\002\026\011\000\002\025\006\000" +
    "\002\025\010\000\002\025\007\000\002\025\011\000\002" +
    "\025\005\000\002\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0214\000\020\006\011\007\006\016\012\017\013\024" +
    "\016\052\015\061\014\001\002\000\004\044\u0201\001\002" +
    "\000\004\002\ufffa\001\002\000\004\055\u0200\001\002\000" +
    "\020\002\ufffc\006\011\007\006\016\012\017\013\024\016" +
    "\052\015\001\002\000\004\002\u01fc\001\002\000\006\052" +
    "\023\055\u01fb\001\002\000\004\055\u01fa\001\002\000\004" +
    "\055\u01f9\001\002\000\004\055\u01f2\001\002\000\004\044" +
    "\u01ec\001\002\000\004\055\u01d1\001\002\000\012\002\000" +
    "\006\022\052\015\061\014\001\002\000\004\002\ufffe\001" +
    "\002\000\006\006\022\052\015\001\002\000\004\052\023" +
    "\001\002\000\004\044\024\001\002\000\004\045\025\001" +
    "\002\000\004\046\026\001\002\000\042\005\043\006\037" +
    "\007\046\010\047\013\053\015\027\016\055\017\050\021" +
    "\032\022\030\035\052\047\041\055\036\057\044\060\051" +
    "\061\045\001\002\000\004\044\u01b5\001\002\000\004\055" +
    "\u0176\001\002\000\050\005\uffd5\006\uffd5\007\uffd5\010\uffd5" +
    "\012\uffd5\013\uffd5\015\uffd5\016\uffd5\017\uffd5\021\uffd5\022" +
    "\uffd5\034\uffd5\035\uffd5\037\uffd5\047\uffd5\055\uffd5\057\uffd5" +
    "\060\uffd5\061\uffd5\001\002\000\010\030\u015f\042\u0160\055" +
    "\u0161\001\002\000\044\005\043\006\037\007\046\010\047" +
    "\012\165\013\053\015\027\016\055\017\050\021\032\022" +
    "\030\035\052\047\u015e\055\036\057\044\060\051\061\045" +
    "\001\002\000\050\005\uffdb\006\uffdb\007\uffdb\010\uffdb\012" +
    "\uffdb\013\uffdb\015\uffdb\016\uffdb\017\uffdb\021\uffdb\022\uffdb" +
    "\034\uffdb\035\uffdb\037\uffdb\047\uffdb\055\uffdb\057\uffdb\060" +
    "\uffdb\061\uffdb\001\002\000\050\005\uffd1\006\uffd1\007\uffd1" +
    "\010\uffd1\012\uffd1\013\uffd1\015\uffd1\016\uffd1\017\uffd1\021" +
    "\uffd1\022\uffd1\034\uffd1\035\uffd1\037\uffd1\047\uffd1\055\uffd1" +
    "\057\uffd1\060\uffd1\061\uffd1\001\002\000\006\025\u0159\044" +
    "\u0158\001\002\000\010\030\u0141\042\u0143\055\u0142\001\002" +
    "\000\050\005\uffd9\006\uffd9\007\uffd9\010\uffd9\012\uffd9\013" +
    "\uffd9\015\uffd9\016\uffd9\017\uffd9\021\uffd9\022\uffd9\034\uffd9" +
    "\035\uffd9\037\uffd9\047\uffd9\055\uffd9\057\uffd9\060\uffd9\061" +
    "\uffd9\001\002\000\004\002\ufff9\001\002\000\050\005\uffd7" +
    "\006\uffd7\007\uffd7\010\uffd7\012\uffd7\013\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\021\uffd7\022\uffd7\034\uffd7\035\uffd7\037\uffd7" +
    "\047\uffd7\055\uffd7\057\uffd7\060\uffd7\061\uffd7\001\002\000" +
    "\010\030\u012e\042\u012f\055\u0130\001\002\000\004\033\u012b" +
    "\001\002\000\004\062\u012a\001\002\000\004\055\311\001" +
    "\002\000\004\044\270\001\002\000\010\030\240\042\241" +
    "\055\242\001\002\000\004\033\231\001\002\000\004\044" +
    "\202\001\002\000\004\044\136\001\002\000\050\005\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\012\uffd2\013\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\021\uffd2\022\uffd2\034\uffd2\035\uffd2\037\uffd2" +
    "\047\uffd2\055\uffd2\057\uffd2\060\uffd2\061\uffd2\001\002\000" +
    "\010\030\056\042\057\055\060\001\002\000\004\055\135" +
    "\001\002\000\004\055\133\001\002\000\014\025\065\041" +
    "\061\042\064\050\063\053\062\001\002\000\004\056\131" +
    "\001\002\000\050\005\uffb4\006\uffb4\007\uffb4\010\uffb4\012" +
    "\uffb4\013\uffb4\015\uffb4\016\uffb4\017\uffb4\021\uffb4\022\uffb4" +
    "\034\uffb4\035\uffb4\037\uffb4\047\uffb4\055\uffb4\057\uffb4\060" +
    "\uffb4\061\uffb4\001\002\000\004\056\126\001\002\000\004" +
    "\053\125\001\002\000\006\055\067\056\066\001\002\000" +
    "\014\026\105\027\104\030\103\031\102\053\124\001\002" +
    "\000\014\026\076\027\075\030\074\031\072\053\073\001" +
    "\002\000\004\053\071\001\002\000\050\005\uffac\006\uffac" +
    "\007\uffac\010\uffac\012\uffac\013\uffac\015\uffac\016\uffac\017" +
    "\uffac\021\uffac\022\uffac\034\uffac\035\uffac\037\uffac\047\uffac" +
    "\055\uffac\057\uffac\060\uffac\061\uffac\001\002\000\006\055" +
    "\100\056\122\001\002\000\050\005\uffb2\006\uffb2\007\uffb2" +
    "\010\uffb2\012\uffb2\013\uffb2\015\uffb2\016\uffb2\017\uffb2\021" +
    "\uffb2\022\uffb2\034\uffb2\035\uffb2\037\uffb2\047\uffb2\055\uffb2" +
    "\057\uffb2\060\uffb2\061\uffb2\001\002\000\006\055\100\056" +
    "\120\001\002\000\006\055\100\056\116\001\002\000\006" +
    "\055\100\056\077\001\002\000\014\026\105\027\104\030" +
    "\103\031\102\053\uff8e\001\002\000\012\026\076\027\075" +
    "\030\074\031\072\001\002\000\004\053\uff86\001\002\000" +
    "\006\055\115\056\114\001\002\000\006\055\113\056\112" +
    "\001\002\000\006\055\111\056\110\001\002\000\006\055" +
    "\107\056\106\001\002\000\004\053\uff8f\001\002\000\004" +
    "\053\uff8a\001\002\000\004\053\uff92\001\002\000\004\053" +
    "\uff88\001\002\000\004\053\uff91\001\002\000\004\053\uff87" +
    "\001\002\000\004\053\uff90\001\002\000\004\053\uff89\001" +
    "\002\000\014\026\105\027\104\030\103\031\102\053\uff8b" +
    "\001\002\000\004\053\uff85\001\002\000\014\026\105\027" +
    "\104\030\103\031\102\053\uff8d\001\002\000\004\053\uff83" +
    "\001\002\000\014\026\105\027\104\030\103\031\102\053" +
    "\uff8c\001\002\000\004\053\uff84\001\002\000\050\005\uffaf" +
    "\006\uffaf\007\uffaf\010\uffaf\012\uffaf\013\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\021\uffaf\022\uffaf\034\uffaf\035\uffaf\037\uffaf" +
    "\047\uffaf\055\uffaf\057\uffaf\060\uffaf\061\uffaf\001\002\000" +
    "\050\005\uffb1\006\uffb1\007\uffb1\010\uffb1\012\uffb1\013\uffb1" +
    "\015\uffb1\016\uffb1\017\uffb1\021\uffb1\022\uffb1\034\uffb1\035" +
    "\uffb1\037\uffb1\047\uffb1\055\uffb1\057\uffb1\060\uffb1\061\uffb1" +
    "\001\002\000\004\051\127\001\002\000\004\053\130\001" +
    "\002\000\050\005\uffae\006\uffae\007\uffae\010\uffae\012\uffae" +
    "\013\uffae\015\uffae\016\uffae\017\uffae\021\uffae\022\uffae\034" +
    "\uffae\035\uffae\037\uffae\047\uffae\055\uffae\057\uffae\060\uffae" +
    "\061\uffae\001\002\000\004\053\132\001\002\000\050\005" +
    "\uffb3\006\uffb3\007\uffb3\010\uffb3\012\uffb3\013\uffb3\015\uffb3" +
    "\016\uffb3\017\uffb3\021\uffb3\022\uffb3\034\uffb3\035\uffb3\037" +
    "\uffb3\047\uffb3\055\uffb3\057\uffb3\060\uffb3\061\uffb3\001\002" +
    "\000\004\053\134\001\002\000\050\005\uffb0\006\uffb0\007" +
    "\uffb0\010\uffb0\012\uffb0\013\uffb0\015\uffb0\016\uffb0\017\uffb0" +
    "\021\uffb0\022\uffb0\034\uffb0\035\uffb0\037\uffb0\047\uffb0\055" +
    "\uffb0\057\uffb0\060\uffb0\061\uffb0\001\002\000\050\005\uffad" +
    "\006\uffad\007\uffad\010\uffad\012\uffad\013\uffad\015\uffad\016" +
    "\uffad\017\uffad\021\uffad\022\uffad\034\uffad\035\uffad\037\uffad" +
    "\047\uffad\055\uffad\057\uffad\060\uffad\061\uffad\001\002\000" +
    "\010\043\141\055\142\056\137\001\002\000\004\033\200" +
    "\001\002\000\004\045\153\001\002\000\016\032\uff54\043" +
    "\uff54\045\uff54\053\uff54\055\uff54\056\uff54\001\002\000\004" +
    "\033\143\001\002\000\012\004\145\043\146\055\147\056" +
    "\144\001\002\000\016\032\uff52\043\uff52\045\uff52\053\uff52" +
    "\055\uff52\056\uff52\001\002\000\006\004\150\055\151\001" +
    "\002\000\016\032\uff53\043\uff53\045\uff53\053\uff53\055\uff53" +
    "\056\uff53\001\002\000\016\032\uff50\043\uff50\045\uff50\053" +
    "\uff50\055\uff50\056\uff50\001\002\000\016\032\uff4f\043\uff4f" +
    "\045\uff4f\053\uff4f\055\uff4f\056\uff4f\001\002\000\004\004" +
    "\152\001\002\000\016\032\uff4e\043\uff4e\045\uff4e\053\uff4e" +
    "\055\uff4e\056\uff4e\001\002\000\004\046\154\001\002\000" +
    "\040\005\043\006\037\007\046\010\047\013\053\015\027" +
    "\016\055\017\050\021\032\022\030\035\052\055\036\057" +
    "\044\060\051\061\045\001\002\000\044\005\043\006\037" +
    "\007\046\010\047\012\165\013\053\015\027\016\055\017" +
    "\050\021\032\022\030\035\052\047\162\055\036\057\044" +
    "\060\051\061\045\001\002\000\050\005\uffd6\006\uffd6\007" +
    "\uffd6\010\uffd6\012\uffd6\013\uffd6\015\uffd6\016\uffd6\017\uffd6" +
    "\021\uffd6\022\uffd6\034\uffd6\035\uffd6\037\uffd6\047\uffd6\055" +
    "\uffd6\057\uffd6\060\uffd6\061\uffd6\001\002\000\050\005\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\012\uffdc\013\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\021\uffdc\022\uffdc\034\uffdc\035\uffdc\037\uffdc" +
    "\047\uffdc\055\uffdc\057\uffdc\060\uffdc\061\uffdc\001\002\000" +
    "\050\005\uffd0\006\uffd0\007\uffd0\010\uffd0\012\uffd0\013\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\021\uffd0\022\uffd0\034\uffd0\035" +
    "\uffd0\037\uffd0\047\uffd0\055\uffd0\057\uffd0\060\uffd0\061\uffd0" +
    "\001\002\000\050\005\uffda\006\uffda\007\uffda\010\uffda\012" +
    "\uffda\013\uffda\015\uffda\016\uffda\017\uffda\021\uffda\022\uffda" +
    "\034\uffda\035\uffda\037\uffda\047\uffda\055\uffda\057\uffda\060" +
    "\uffda\061\uffda\001\002\000\050\005\uff4c\006\uff4c\007\uff4c" +
    "\010\uff4c\012\uff4c\013\uff4c\015\uff4c\016\uff4c\017\uff4c\021" +
    "\uff4c\022\uff4c\034\uff4c\035\uff4c\037\uff4c\047\uff4c\055\uff4c" +
    "\057\uff4c\060\uff4c\061\uff4c\001\002\000\050\005\uffd8\006" +
    "\uffd8\007\uffd8\010\uffd8\012\uffd8\013\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\021\uffd8\022\uffd8\034\uffd8\035\uffd8\037\uffd8\047" +
    "\uffd8\055\uffd8\057\uffd8\060\uffd8\061\uffd8\001\002\000\004" +
    "\012\165\001\002\000\004\046\167\001\002\000\050\005" +
    "\uffd3\006\uffd3\007\uffd3\010\uffd3\012\uffd3\013\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\021\uffd3\022\uffd3\034\uffd3\035\uffd3\037" +
    "\uffd3\047\uffd3\055\uffd3\057\uffd3\060\uffd3\061\uffd3\001\002" +
    "\000\040\005\043\006\037\007\046\010\047\013\053\015" +
    "\027\016\055\017\050\021\032\022\030\035\052\055\036" +
    "\057\044\060\051\061\045\001\002\000\044\005\043\006" +
    "\037\007\046\010\047\012\165\013\053\015\027\016\055" +
    "\017\050\021\032\022\030\035\052\047\171\055\036\057" +
    "\044\060\051\061\045\001\002\000\004\013\172\001\002" +
    "\000\004\044\173\001\002\000\010\043\141\055\142\056" +
    "\137\001\002\000\004\045\175\001\002\000\004\053\176" +
    "\001\002\000\050\005\uff4b\006\uff4b\007\uff4b\010\uff4b\012" +
    "\uff4b\013\uff4b\015\uff4b\016\uff4b\017\uff4b\021\uff4b\022\uff4b" +
    "\034\uff4b\035\uff4b\037\uff4b\047\uff4b\055\uff4b\057\uff4b\060" +
    "\uff4b\061\uff4b\001\002\000\050\005\uffd4\006\uffd4\007\uffd4" +
    "\010\uffd4\012\uffd4\013\uffd4\015\uffd4\016\uffd4\017\uffd4\021" +
    "\uffd4\022\uffd4\034\uffd4\035\uffd4\037\uffd4\047\uffd4\055\uffd4" +
    "\057\uffd4\060\uffd4\061\uffd4\001\002\000\004\055\201\001" +
    "\002\000\016\032\uff51\043\uff51\045\uff51\053\uff51\055\uff51" +
    "\056\uff51\001\002\000\004\055\203\001\002\000\004\045" +
    "\204\001\002\000\004\046\205\001\002\000\006\014\206" +
    "\036\207\001\002\000\004\040\227\001\002\000\006\004" +
    "\213\056\212\001\002\000\004\047\211\001\002\000\050" +
    "\005\uff44\006\uff44\007\uff44\010\uff44\012\uff44\013\uff44\015" +
    "\uff44\016\uff44\017\uff44\021\uff44\022\uff44\034\uff44\035\uff44" +
    "\037\uff44\047\uff44\055\uff44\057\uff44\060\uff44\061\uff44\001" +
    "\002\000\004\040\224\001\002\000\004\055\214\001\002" +
    "\000\004\004\215\001\002\000\004\040\216\001\002\000" +
    "\040\005\043\006\037\007\046\010\047\013\053\015\027" +
    "\016\055\017\050\021\032\022\030\035\052\055\036\057" +
    "\044\060\051\061\045\001\002\000\044\005\043\006\037" +
    "\007\046\010\047\012\165\013\053\015\027\016\055\017" +
    "\050\021\032\022\030\035\052\037\222\055\036\057\044" +
    "\060\051\061\045\001\002\000\010\014\206\036\207\047" +
    "\uff42\001\002\000\004\047\uff40\001\002\000\004\053\223" +
    "\001\002\000\010\014\uff3e\036\uff3e\047\uff3e\001\002\000" +
    "\040\005\043\006\037\007\046\010\047\013\053\015\027" +
    "\016\055\017\050\021\032\022\030\035\052\055\036\057" +
    "\044\060\051\061\045\001\002\000\010\014\206\036\207" +
    "\047\uff43\001\002\000\004\047\uff41\001\002\000\040\005" +
    "\043\006\037\007\046\010\047\013\053\015\027\016\055" +
    "\017\050\021\032\022\030\035\052\055\036\057\044\060" +
    "\051\061\045\001\002\000\044\005\043\006\037\007\046" +
    "\010\047\012\165\013\053\015\027\016\055\017\050\021" +
    "\032\022\030\035\052\047\uff3f\055\036\057\044\060\051" +
    "\061\045\001\002\000\006\004\232\055\233\001\002\000" +
    "\004\055\235\001\002\000\004\053\234\001\002\000\050" +
    "\005\uff94\006\uff94\007\uff94\010\uff94\012\uff94\013\uff94\015" +
    "\uff94\016\uff94\017\uff94\021\uff94\022\uff94\034\uff94\035\uff94" +
    "\037\uff94\047\uff94\055\uff94\057\uff94\060\uff94\061\uff94\001" +
    "\002\000\004\004\236\001\002\000\004\053\237\001\002" +
    "\000\050\005\uff93\006\uff93\007\uff93\010\uff93\012\uff93\013" +
    "\uff93\015\uff93\016\uff93\017\uff93\021\uff93\022\uff93\034\uff93" +
    "\035\uff93\037\uff93\047\uff93\055\uff93\057\uff93\060\uff93\061" +
    "\uff93\001\002\000\004\055\266\001\002\000\004\055\264" +
    "\001\002\000\014\025\247\041\243\042\246\050\245\053" +
    "\244\001\002\000\004\056\262\001\002\000\050\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\012\uffbd\013\uffbd\015\uffbd\016" +
    "\uffbd\017\uffbd\021\uffbd\022\uffbd\034\uffbd\035\uffbd\037\uffbd" +
    "\047\uffbd\055\uffbd\057\uffbd\060\uffbd\061\uffbd\001\002\000" +
    "\004\056\257\001\002\000\004\053\256\001\002\000\006" +
    "\055\251\056\250\001\002\000\014\026\105\027\104\030" +
    "\103\031\102\053\255\001\002\000\014\026\076\027\075" +
    "\030\074\031\072\053\254\001\002\000\004\053\253\001" +
    "\002\000\050\005\uffb5\006\uffb5\007\uffb5\010\uffb5\012\uffb5" +
    "\013\uffb5\015\uffb5\016\uffb5\017\uffb5\021\uffb5\022\uffb5\034" +
    "\uffb5\035\uffb5\037\uffb5\047\uffb5\055\uffb5\057\uffb5\060\uffb5" +
    "\061\uffb5\001\002\000\050\005\uffbb\006\uffbb\007\uffbb\010" +
    "\uffbb\012\uffbb\013\uffbb\015\uffbb\016\uffbb\017\uffbb\021\uffbb" +
    "\022\uffbb\034\uffbb\035\uffbb\037\uffbb\047\uffbb\055\uffbb\057" +
    "\uffbb\060\uffbb\061\uffbb\001\002\000\050\005\uffba\006\uffba" +
    "\007\uffba\010\uffba\012\uffba\013\uffba\015\uffba\016\uffba\017" +
    "\uffba\021\uffba\022\uffba\034\uffba\035\uffba\037\uffba\047\uffba" +
    "\055\uffba\057\uffba\060\uffba\061\uffba\001\002\000\050\005" +
    "\uffb9\006\uffb9\007\uffb9\010\uffb9\012\uffb9\013\uffb9\015\uffb9" +
    "\016\uffb9\017\uffb9\021\uffb9\022\uffb9\034\uffb9\035\uffb9\037" +
    "\uffb9\047\uffb9\055\uffb9\057\uffb9\060\uffb9\061\uffb9\001\002" +
    "\000\004\051\260\001\002\000\004\053\261\001\002\000" +
    "\050\005\uffb7\006\uffb7\007\uffb7\010\uffb7\012\uffb7\013\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\021\uffb7\022\uffb7\034\uffb7\035" +
    "\uffb7\037\uffb7\047\uffb7\055\uffb7\057\uffb7\060\uffb7\061\uffb7" +
    "\001\002\000\004\053\263\001\002\000\050\005\uffbc\006" +
    "\uffbc\007\uffbc\010\uffbc\012\uffbc\013\uffbc\015\uffbc\016\uffbc" +
    "\017\uffbc\021\uffbc\022\uffbc\034\uffbc\035\uffbc\037\uffbc\047" +
    "\uffbc\055\uffbc\057\uffbc\060\uffbc\061\uffbc\001\002\000\004" +
    "\053\265\001\002\000\050\005\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\012\uffb8\013\uffb8\015\uffb8\016\uffb8\017\uffb8\021\uffb8" +
    "\022\uffb8\034\uffb8\035\uffb8\037\uffb8\047\uffb8\055\uffb8\057" +
    "\uffb8\060\uffb8\061\uffb8\001\002\000\004\053\267\001\002" +
    "\000\050\005\uffb6\006\uffb6\007\uffb6\010\uffb6\012\uffb6\013" +
    "\uffb6\015\uffb6\016\uffb6\017\uffb6\021\uffb6\022\uffb6\034\uffb6" +
    "\035\uffb6\037\uffb6\047\uffb6\055\uffb6\057\uffb6\060\uffb6\061" +
    "\uffb6\001\002\000\010\043\141\055\142\056\137\001\002" +
    "\000\006\032\272\045\273\001\002\000\010\043\141\055" +
    "\142\056\137\001\002\000\004\046\274\001\002\000\040" +
    "\005\043\006\037\007\046\010\047\013\053\015\027\016" +
    "\055\017\050\021\032\022\030\035\052\055\036\057\044" +
    "\060\051\061\045\001\002\000\044\005\043\006\037\007" +
    "\046\010\047\012\165\013\053\015\027\016\055\017\050" +
    "\021\032\022\030\035\052\047\276\055\036\057\044\060" +
    "\051\061\045\001\002\000\052\005\uff56\006\uff56\007\uff56" +
    "\010\uff56\011\277\012\uff56\013\uff56\015\uff56\016\uff56\017" +
    "\uff56\021\uff56\022\uff56\034\uff56\035\uff56\037\uff56\047\uff56" +
    "\055\uff56\057\uff56\060\uff56\061\uff56\001\002\000\004\046" +
    "\300\001\002\000\040\005\043\006\037\007\046\010\047" +
    "\013\053\015\027\016\055\017\050\021\032\022\030\035" +
    "\052\055\036\057\044\060\051\061\045\001\002\000\044" +
    "\005\043\006\037\007\046\010\047\012\165\013\053\015" +
    "\027\016\055\017\050\021\032\022\030\035\052\047\302" +
    "\055\036\057\044\060\051\061\045\001\002\000\050\005" +
    "\uff4d\006\uff4d\007\uff4d\010\uff4d\012\uff4d\013\uff4d\015\uff4d" +
    "\016\uff4d\017\uff4d\021\uff4d\022\uff4d\034\uff4d\035\uff4d\037" +
    "\uff4d\047\uff4d\055\uff4d\057\uff4d\060\uff4d\061\uff4d\001\002" +
    "\000\010\043\141\055\142\056\137\001\002\000\004\045" +
    "\305\001\002\000\004\046\306\001\002\000\040\005\043" +
    "\006\037\007\046\010\047\013\053\015\027\016\055\017" +
    "\050\021\032\022\030\035\052\055\036\057\044\060\051" +
    "\061\045\001\002\000\044\005\043\006\037\007\046\010" +
    "\047\012\165\013\053\015\027\016\055\017\050\021\032" +
    "\022\030\035\052\047\310\055\036\057\044\060\051\061" +
    "\045\001\002\000\050\005\uff55\006\uff55\007\uff55\010\uff55" +
    "\012\uff55\013\uff55\015\uff55\016\uff55\017\uff55\021\uff55\022" +
    "\uff55\034\uff55\035\uff55\037\uff55\047\uff55\055\uff55\057\uff55" +
    "\060\uff55\061\uff55\001\002\000\012\025\315\041\312\050" +
    "\314\053\313\001\002\000\004\004\u0124\001\002\000\050" +
    "\005\uffa2\006\uffa2\007\uffa2\010\uffa2\012\uffa2\013\uffa2\015" +
    "\uffa2\016\uffa2\017\uffa2\021\uffa2\022\uffa2\034\uffa2\035\uffa2" +
    "\037\uffa2\047\uffa2\055\uffa2\057\uffa2\060\uffa2\061\uffa2\001" +
    "\002\000\004\056\u0121\001\002\000\006\004\316\055\317" +
    "\001\002\000\010\004\u011c\055\u011d\056\351\001\002\000" +
    "\012\026\325\027\324\030\323\031\322\001\002\000\004" +
    "\053\321\001\002\000\050\005\uffa0\006\uffa0\007\uffa0\010" +
    "\uffa0\012\uffa0\013\uffa0\015\uffa0\016\uffa0\017\uffa0\021\uffa0" +
    "\022\uffa0\034\uffa0\035\uffa0\037\uffa0\047\uffa0\055\uffa0\057" +
    "\uffa0\060\uffa0\061\uffa0\001\002\000\006\004\u0116\055\317" +
    "\001\002\000\006\004\u0110\055\317\001\002\000\006\004" +
    "\u010a\055\317\001\002\000\006\004\326\055\317\001\002" +
    "\000\006\055\331\056\330\001\002\000\004\053\uff76\001" +
    "\002\000\004\004\u0109\001\002\000\004\004\332\001\002" +
    "\000\014\026\336\027\335\030\334\031\333\053\uff7e\001" +
    "\002\000\006\004\u0105\055\u0106\001\002\000\006\004\u0101" +
    "\055\u0102\001\002\000\006\004\343\055\344\001\002\000" +
    "\006\004\337\055\340\001\002\000\004\055\341\001\002" +
    "\000\004\053\uff7a\001\002\000\004\004\342\001\002\000" +
    "\004\053\uff7f\001\002\000\004\055\345\001\002\000\004" +
    "\053\uff78\001\002\000\004\004\346\001\002\000\006\004" +
    "\347\055\317\001\002\000\006\055\352\056\351\001\002" +
    "\000\004\053\uff82\001\002\000\004\004\354\001\002\000" +
    "\004\004\353\001\002\000\012\026\336\027\335\030\334" +
    "\031\333\001\002\000\012\026\360\027\357\030\356\031" +
    "\355\001\002\000\006\004\375\055\376\001\002\000\006" +
    "\004\371\055\372\001\002\000\006\004\365\055\366\001" +
    "\002\000\006\004\361\055\362\001\002\000\004\056\363" +
    "\001\002\000\004\053\uff6a\001\002\000\004\004\364\001" +
    "\002\000\004\053\uff6f\001\002\000\004\056\367\001\002" +
    "\000\004\053\uff68\001\002\000\004\004\370\001\002\000" +
    "\004\053\uff72\001\002\000\004\056\373\001\002\000\004" +
    "\053\uff67\001\002\000\004\004\374\001\002\000\004\053" +
    "\uff71\001\002\000\004\056\377\001\002\000\004\053\uff69" +
    "\001\002\000\004\004\u0100\001\002\000\004\053\uff70\001" +
    "\002\000\004\055\u0103\001\002\000\004\053\uff77\001\002" +
    "\000\004\004\u0104\001\002\000\004\053\uff81\001\002\000" +
    "\004\055\u0107\001\002\000\004\053\uff79\001\002\000\004" +
    "\004\u0108\001\002\000\004\053\uff80\001\002\000\014\026" +
    "\360\027\357\030\356\031\355\053\uff6e\001\002\000\006" +
    "\055\u010d\056\u010c\001\002\000\004\053\uff75\001\002\000" +
    "\004\004\u010f\001\002\000\004\004\u010e\001\002\000\014" +
    "\026\336\027\335\030\334\031\333\053\uff7b\001\002\000" +
    "\014\026\360\027\357\030\356\031\355\053\uff6b\001\002" +
    "\000\006\055\u0113\056\u0112\001\002\000\004\053\uff73\001" +
    "\002\000\004\004\u0115\001\002\000\004\004\u0114\001\002" +
    "\000\014\026\336\027\335\030\334\031\333\053\uff7d\001" +
    "\002\000\014\026\360\027\357\030\356\031\355\053\uff6d" +
    "\001\002\000\006\055\u0119\056\u0118\001\002\000\004\053" +
    "\uff74\001\002\000\004\004\u011b\001\002\000\004\004\u011a" +
    "\001\002\000\014\026\336\027\335\030\334\031\333\053" +
    "\uff7c\001\002\000\014\026\360\027\357\030\356\031\355" +
    "\053\uff6c\001\002\000\004\053\u0120\001\002\000\004\004" +
    "\u011e\001\002\000\014\026\336\027\335\030\334\031\333" +
    "\053\u011f\001\002\000\050\005\uff9b\006\uff9b\007\uff9b\010" +
    "\uff9b\012\uff9b\013\uff9b\015\uff9b\016\uff9b\017\uff9b\021\uff9b" +
    "\022\uff9b\034\uff9b\035\uff9b\037\uff9b\047\uff9b\055\uff9b\057" +
    "\uff9b\060\uff9b\061\uff9b\001\002\000\050\005\uff9d\006\uff9d" +
    "\007\uff9d\010\uff9d\012\uff9d\013\uff9d\015\uff9d\016\uff9d\017" +
    "\uff9d\021\uff9d\022\uff9d\034\uff9d\035\uff9d\037\uff9d\047\uff9d" +
    "\055\uff9d\057\uff9d\060\uff9d\061\uff9d\001\002\000\004\051" +
    "\u0122\001\002\000\004\053\u0123\001\002\000\050\005\uffa1" +
    "\006\uffa1\007\uffa1\010\uffa1\012\uffa1\013\uffa1\015\uffa1\016" +
    "\uffa1\017\uffa1\021\uffa1\022\uffa1\034\uffa1\035\uffa1\037\uffa1" +
    "\047\uffa1\055\uffa1\057\uffa1\060\uffa1\061\uffa1\001\002\000" +
    "\006\004\u0125\055\u0126\001\002\000\004\053\u0129\001\002" +
    "\000\004\004\u0127\001\002\000\004\053\u0128\001\002\000" +
    "\050\005\uff9c\006\uff9c\007\uff9c\010\uff9c\012\uff9c\013\uff9c" +
    "\015\uff9c\016\uff9c\017\uff9c\021\uff9c\022\uff9c\034\uff9c\035" +
    "\uff9c\037\uff9c\047\uff9c\055\uff9c\057\uff9c\060\uff9c\061\uff9c" +
    "\001\002\000\050\005\uff9e\006\uff9e\007\uff9e\010\uff9e\012" +
    "\uff9e\013\uff9e\015\uff9e\016\uff9e\017\uff9e\021\uff9e\022\uff9e" +
    "\034\uff9e\035\uff9e\037\uff9e\047\uff9e\055\uff9e\057\uff9e\060" +
    "\uff9e\061\uff9e\001\002\000\050\005\uffcf\006\uffcf\007\uffcf" +
    "\010\uffcf\012\uffcf\013\uffcf\015\uffcf\016\uffcf\017\uffcf\021" +
    "\uffcf\022\uffcf\034\uffcf\035\uffcf\037\uffcf\047\uffcf\055\uffcf" +
    "\057\uffcf\060\uffcf\061\uffcf\001\002\000\004\055\u012c\001" +
    "\002\000\004\053\u012d\001\002\000\050\005\uff95\006\uff95" +
    "\007\uff95\010\uff95\012\uff95\013\uff95\015\uff95\016\uff95\017" +
    "\uff95\021\uff95\022\uff95\034\uff95\035\uff95\037\uff95\047\uff95" +
    "\055\uff95\057\uff95\060\uff95\061\uff95\001\002\000\004\055" +
    "\u0140\001\002\000\004\055\u013e\001\002\000\014\025\u0135" +
    "\041\u0131\042\u0134\050\u0133\053\u0132\001\002\000\004\056" +
    "\u013c\001\002\000\050\005\uffcd\006\uffcd\007\uffcd\010\uffcd" +
    "\012\uffcd\013\uffcd\015\uffcd\016\uffcd\017\uffcd\021\uffcd\022" +
    "\uffcd\034\uffcd\035\uffcd\037\uffcd\047\uffcd\055\uffcd\057\uffcd" +
    "\060\uffcd\061\uffcd\001\002\000\004\056\u0139\001\002\000" +
    "\004\053\u0138\001\002\000\004\055\u0136\001\002\000\004" +
    "\053\u0137\001\002\000\050\005\uffcb\006\uffcb\007\uffcb\010" +
    "\uffcb\012\uffcb\013\uffcb\015\uffcb\016\uffcb\017\uffcb\021\uffcb" +
    "\022\uffcb\034\uffcb\035\uffcb\037\uffcb\047\uffcb\055\uffcb\057" +
    "\uffcb\060\uffcb\061\uffcb\001\002\000\050\005\uffca\006\uffca" +
    "\007\uffca\010\uffca\012\uffca\013\uffca\015\uffca\016\uffca\017" +
    "\uffca\021\uffca\022\uffca\034\uffca\035\uffca\037\uffca\047\uffca" +
    "\055\uffca\057\uffca\060\uffca\061\uffca\001\002\000\004\051" +
    "\u013a\001\002\000\004\053\u013b\001\002\000\050\005\uffc8" +
    "\006\uffc8\007\uffc8\010\uffc8\012\uffc8\013\uffc8\015\uffc8\016" +
    "\uffc8\017\uffc8\021\uffc8\022\uffc8\034\uffc8\035\uffc8\037\uffc8" +
    "\047\uffc8\055\uffc8\057\uffc8\060\uffc8\061\uffc8\001\002\000" +
    "\004\053\u013d\001\002\000\050\005\uffcc\006\uffcc\007\uffcc" +
    "\010\uffcc\012\uffcc\013\uffcc\015\uffcc\016\uffcc\017\uffcc\021" +
    "\uffcc\022\uffcc\034\uffcc\035\uffcc\037\uffcc\047\uffcc\055\uffcc" +
    "\057\uffcc\060\uffcc\061\uffcc\001\002\000\004\053\u013f\001" +
    "\002\000\050\005\uffc9\006\uffc9\007\uffc9\010\uffc9\012\uffc9" +
    "\013\uffc9\015\uffc9\016\uffc9\017\uffc9\021\uffc9\022\uffc9\034" +
    "\uffc9\035\uffc9\037\uffc9\047\uffc9\055\uffc9\057\uffc9\060\uffc9" +
    "\061\uffc9\001\002\000\050\005\uffc7\006\uffc7\007\uffc7\010" +
    "\uffc7\012\uffc7\013\uffc7\015\uffc7\016\uffc7\017\uffc7\021\uffc7" +
    "\022\uffc7\034\uffc7\035\uffc7\037\uffc7\047\uffc7\055\uffc7\057" +
    "\uffc7\060\uffc7\061\uffc7\001\002\000\004\055\u0157\001\002" +
    "\000\014\025\u014a\041\u0146\042\u0149\050\u0148\053\u0147\001" +
    "\002\000\004\055\u0144\001\002\000\004\053\u0145\001\002" +
    "\000\050\005\uffc2\006\uffc2\007\uffc2\010\uffc2\012\uffc2\013" +
    "\uffc2\015\uffc2\016\uffc2\017\uffc2\021\uffc2\022\uffc2\034\uffc2" +
    "\035\uffc2\037\uffc2\047\uffc2\055\uffc2\057\uffc2\060\uffc2\061" +
    "\uffc2\001\002\000\004\056\u0155\001\002\000\050\005\uffc6" +
    "\006\uffc6\007\uffc6\010\uffc6\012\uffc6\013\uffc6\015\uffc6\016" +
    "\uffc6\017\uffc6\021\uffc6\022\uffc6\034\uffc6\035\uffc6\037\uffc6" +
    "\047\uffc6\055\uffc6\057\uffc6\060\uffc6\061\uffc6\001\002\000" +
    "\004\056\u0152\001\002\000\004\053\u0151\001\002\000\006" +
    "\055\u014c\056\u014b\001\002\000\014\026\105\027\104\030" +
    "\103\031\102\053\u0150\001\002\000\014\026\076\027\075" +
    "\030\074\031\072\053\u014f\001\002\000\004\053\u014e\001" +
    "\002\000\050\005\uffbe\006\uffbe\007\uffbe\010\uffbe\012\uffbe" +
    "\013\uffbe\015\uffbe\016\uffbe\017\uffbe\021\uffbe\022\uffbe\034" +
    "\uffbe\035\uffbe\037\uffbe\047\uffbe\055\uffbe\057\uffbe\060\uffbe" +
    "\061\uffbe\001\002\000\050\005\uffc4\006\uffc4\007\uffc4\010" +
    "\uffc4\012\uffc4\013\uffc4\015\uffc4\016\uffc4\017\uffc4\021\uffc4" +
    "\022\uffc4\034\uffc4\035\uffc4\037\uffc4\047\uffc4\055\uffc4\057" +
    "\uffc4\060\uffc4\061\uffc4\001\002\000\050\005\uffc1\006\uffc1" +
    "\007\uffc1\010\uffc1\012\uffc1\013\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\021\uffc1\022\uffc1\034\uffc1\035\uffc1\037\uffc1\047\uffc1" +
    "\055\uffc1\057\uffc1\060\uffc1\061\uffc1\001\002\000\050\005" +
    "\uffc3\006\uffc3\007\uffc3\010\uffc3\012\uffc3\013\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\021\uffc3\022\uffc3\034\uffc3\035\uffc3\037" +
    "\uffc3\047\uffc3\055\uffc3\057\uffc3\060\uffc3\061\uffc3\001\002" +
    "\000\004\051\u0153\001\002\000\004\053\u0154\001\002\000" +
    "\050\005\uffc0\006\uffc0\007\uffc0\010\uffc0\012\uffc0\013\uffc0" +
    "\015\uffc0\016\uffc0\017\uffc0\021\uffc0\022\uffc0\034\uffc0\035" +
    "\uffc0\037\uffc0\047\uffc0\055\uffc0\057\uffc0\060\uffc0\061\uffc0" +
    "\001\002\000\004\053\u0156\001\002\000\050\005\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\012\uffc5\013\uffc5\015\uffc5\016\uffc5" +
    "\017\uffc5\021\uffc5\022\uffc5\034\uffc5\035\uffc5\037\uffc5\047" +
    "\uffc5\055\uffc5\057\uffc5\060\uffc5\061\uffc5\001\002\000\050" +
    "\005\uffbf\006\uffbf\007\uffbf\010\uffbf\012\uffbf\013\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\021\uffbf\022\uffbf\034\uffbf\035\uffbf" +
    "\037\uffbf\047\uffbf\055\uffbf\057\uffbf\060\uffbf\061\uffbf\001" +
    "\002\000\004\045\u015c\001\002\000\006\004\347\055\317" +
    "\001\002\000\004\053\u015b\001\002\000\050\005\uff9f\006" +
    "\uff9f\007\uff9f\010\uff9f\012\uff9f\013\uff9f\015\uff9f\016\uff9f" +
    "\017\uff9f\021\uff9f\022\uff9f\034\uff9f\035\uff9f\037\uff9f\047" +
    "\uff9f\055\uff9f\057\uff9f\060\uff9f\061\uff9f\001\002\000\004" +
    "\053\u015d\001\002\000\050\005\uffce\006\uffce\007\uffce\010" +
    "\uffce\012\uffce\013\uffce\015\uffce\016\uffce\017\uffce\021\uffce" +
    "\022\uffce\034\uffce\035\uffce\037\uffce\047\uffce\055\uffce\057" +
    "\uffce\060\uffce\061\uffce\001\002\000\004\002\ufff7\001\002" +
    "\000\004\055\u0175\001\002\000\004\055\u0173\001\002\000" +
    "\014\025\u0166\041\u0162\042\u0165\050\u0164\053\u0163\001\002" +
    "\000\004\056\u0171\001\002\000\050\005\uffab\006\uffab\007" +
    "\uffab\010\uffab\012\uffab\013\uffab\015\uffab\016\uffab\017\uffab" +
    "\021\uffab\022\uffab\034\uffab\035\uffab\037\uffab\047\uffab\055" +
    "\uffab\057\uffab\060\uffab\061\uffab\001\002\000\004\056\u016e" +
    "\001\002\000\004\053\u016d\001\002\000\006\055\u0168\056" +
    "\u0167\001\002\000\014\026\105\027\104\030\103\031\102" +
    "\053\u016c\001\002\000\014\026\076\027\075\030\074\031" +
    "\072\053\u016b\001\002\000\004\053\u016a\001\002\000\050" +
    "\005\uffa3\006\uffa3\007\uffa3\010\uffa3\012\uffa3\013\uffa3\015" +
    "\uffa3\016\uffa3\017\uffa3\021\uffa3\022\uffa3\034\uffa3\035\uffa3" +
    "\037\uffa3\047\uffa3\055\uffa3\057\uffa3\060\uffa3\061\uffa3\001" +
    "\002\000\050\005\uffa9\006\uffa9\007\uffa9\010\uffa9\012\uffa9" +
    "\013\uffa9\015\uffa9\016\uffa9\017\uffa9\021\uffa9\022\uffa9\034" +
    "\uffa9\035\uffa9\037\uffa9\047\uffa9\055\uffa9\057\uffa9\060\uffa9" +
    "\061\uffa9\001\002\000\050\005\uffa6\006\uffa6\007\uffa6\010" +
    "\uffa6\012\uffa6\013\uffa6\015\uffa6\016\uffa6\017\uffa6\021\uffa6" +
    "\022\uffa6\034\uffa6\035\uffa6\037\uffa6\047\uffa6\055\uffa6\057" +
    "\uffa6\060\uffa6\061\uffa6\001\002\000\050\005\uffa8\006\uffa8" +
    "\007\uffa8\010\uffa8\012\uffa8\013\uffa8\015\uffa8\016\uffa8\017" +
    "\uffa8\021\uffa8\022\uffa8\034\uffa8\035\uffa8\037\uffa8\047\uffa8" +
    "\055\uffa8\057\uffa8\060\uffa8\061\uffa8\001\002\000\004\051" +
    "\u016f\001\002\000\004\053\u0170\001\002\000\050\005\uffa5" +
    "\006\uffa5\007\uffa5\010\uffa5\012\uffa5\013\uffa5\015\uffa5\016" +
    "\uffa5\017\uffa5\021\uffa5\022\uffa5\034\uffa5\035\uffa5\037\uffa5" +
    "\047\uffa5\055\uffa5\057\uffa5\060\uffa5\061\uffa5\001\002\000" +
    "\004\053\u0172\001\002\000\050\005\uffaa\006\uffaa\007\uffaa" +
    "\010\uffaa\012\uffaa\013\uffaa\015\uffaa\016\uffaa\017\uffaa\021" +
    "\uffaa\022\uffaa\034\uffaa\035\uffaa\037\uffaa\047\uffaa\055\uffaa" +
    "\057\uffaa\060\uffaa\061\uffaa\001\002\000\004\053\u0174\001" +
    "\002\000\050\005\uffa7\006\uffa7\007\uffa7\010\uffa7\012\uffa7" +
    "\013\uffa7\015\uffa7\016\uffa7\017\uffa7\021\uffa7\022\uffa7\034" +
    "\uffa7\035\uffa7\037\uffa7\047\uffa7\055\uffa7\057\uffa7\060\uffa7" +
    "\061\uffa7\001\002\000\050\005\uffa4\006\uffa4\007\uffa4\010" +
    "\uffa4\012\uffa4\013\uffa4\015\uffa4\016\uffa4\017\uffa4\021\uffa4" +
    "\022\uffa4\034\uffa4\035\uffa4\037\uffa4\047\uffa4\055\uffa4\057" +
    "\uffa4\060\uffa4\061\uffa4\001\002\000\012\025\u017a\041\u0177" +
    "\050\u0179\053\u0178\001\002\000\004\020\u01b1\001\002\000" +
    "\050\005\uff9a\006\uff9a\007\uff9a\010\uff9a\012\uff9a\013\uff9a" +
    "\015\uff9a\016\uff9a\017\uff9a\021\uff9a\022\uff9a\034\uff9a\035" +
    "\uff9a\037\uff9a\047\uff9a\055\uff9a\057\uff9a\060\uff9a\061\uff9a" +
    "\001\002\000\004\056\u01ae\001\002\000\006\020\u017c\055" +
    "\u017d\001\002\000\004\053\u01ad\001\002\000\004\023\u0192" +
    "\001\002\000\012\026\u0181\027\u0180\030\u017f\031\u017e\001" +
    "\002\000\010\004\347\020\u018e\055\317\001\002\000\010" +
    "\004\347\020\u018a\055\317\001\002\000\010\004\347\020" +
    "\u0186\055\317\001\002\000\010\004\347\020\u0182\055\317" +
    "\001\002\000\004\023\u0184\001\002\000\004\053\uff5e\001" +
    "\002\000\004\020\u0185\001\002\000\004\053\uff62\001\002" +
    "\000\004\023\u0188\001\002\000\004\053\uff5d\001\002\000" +
    "\004\020\u0189\001\002\000\004\053\uff5f\001\002\000\004" +
    "\023\u018c\001\002\000\004\053\uff5b\001\002\000\004\020" +
    "\u018d\001\002\000\004\053\uff61\001\002\000\004\023\u0190" +
    "\001\002\000\004\053\uff5c\001\002\000\004\020\u0191\001" +
    "\002\000\004\053\uff60\001\002\000\004\020\u0193\001\002" +
    "\000\014\026\u0198\027\u0197\030\u0195\031\u0194\053\u0196\001" +
    "\002\000\006\020\u01a9\055\u01aa\001\002\000\006\020\u01a5" +
    "\055\u01a6\001\002\000\050\005\uff96\006\uff96\007\uff96\010" +
    "\uff96\012\uff96\013\uff96\015\uff96\016\uff96\017\uff96\021\uff96" +
    "\022\uff96\034\uff96\035\uff96\037\uff96\047\uff96\055\uff96\057" +
    "\uff96\060\uff96\061\uff96\001\002\000\006\020\u019d\055\u019e" +
    "\001\002\000\006\020\u0199\055\u019a\001\002\000\004\023" +
    "\u019b\001\002\000\004\053\uff5a\001\002\000\004\020\u019c" +
    "\001\002\000\004\053\uff63\001\002\000\004\023\u019f\001" +
    "\002\000\004\053\uff58\001\002\000\004\020\u01a0\001\002" +
    "\000\006\020\u01a2\055\u017d\001\002\000\004\053\uff66\001" +
    "\002\000\004\023\u01a3\001\002\000\004\020\u01a4\001\002" +
    "\000\012\026\u0198\027\u0197\030\u0195\031\u0194\001\002\000" +
    "\004\023\u01a7\001\002\000\004\053\uff57\001\002\000\004" +
    "\020\u01a8\001\002\000\004\053\uff65\001\002\000\004\023" +
    "\u01ab\001\002\000\004\053\uff59\001\002\000\004\020\u01ac" +
    "\001\002\000\004\053\uff64\001\002\000\050\005\uff98\006" +
    "\uff98\007\uff98\010\uff98\012\uff98\013\uff98\015\uff98\016\uff98" +
    "\017\uff98\021\uff98\022\uff98\034\uff98\035\uff98\037\uff98\047" +
    "\uff98\055\uff98\057\uff98\060\uff98\061\uff98\001\002\000\004" +
    "\051\u01af\001\002\000\004\053\u01b0\001\002\000\050\005" +
    "\uff99\006\uff99\007\uff99\010\uff99\012\uff99\013\uff99\015\uff99" +
    "\016\uff99\017\uff99\021\uff99\022\uff99\034\uff99\035\uff99\037" +
    "\uff99\047\uff99\055\uff99\057\uff99\060\uff99\061\uff99\001\002" +
    "\000\004\023\u01b2\001\002\000\004\020\u01b3\001\002\000" +
    "\004\053\u01b4\001\002\000\050\005\uff97\006\uff97\007\uff97" +
    "\010\uff97\012\uff97\013\uff97\015\uff97\016\uff97\017\uff97\021" +
    "\uff97\022\uff97\034\uff97\035\uff97\037\uff97\047\uff97\055\uff97" +
    "\057\uff97\060\uff97\061\uff97\001\002\000\006\006\u01b8\055" +
    "\u01b7\001\002\000\004\045\u01cc\001\002\000\004\025\u01c6" +
    "\001\002\000\004\055\u01b9\001\002\000\004\025\u01ba\001" +
    "\002\000\004\056\u01bb\001\002\000\004\053\u01bc\001\002" +
    "\000\010\043\141\055\142\056\137\001\002\000\004\053" +
    "\u01be\001\002\000\006\042\u01c0\055\u01c1\001\002\000\004" +
    "\045\uff49\001\002\000\004\055\u01c5\001\002\000\006\041" +
    "\u01c2\042\u01c3\001\002\000\004\056\u01c4\001\002\000\004" +
    "\045\uff46\001\002\000\004\045\uff47\001\002\000\004\045" +
    "\uff45\001\002\000\004\056\u01c7\001\002\000\004\053\u01c8" +
    "\001\002\000\010\043\141\055\142\056\137\001\002\000" +
    "\004\053\u01ca\001\002\000\006\042\u01c0\055\u01c1\001\002" +
    "\000\004\045\uff48\001\002\000\004\046\u01cd\001\002\000" +
    "\040\005\043\006\037\007\046\010\047\013\053\015\027" +
    "\016\055\017\050\021\032\022\030\035\052\055\036\057" +
    "\044\060\051\061\045\001\002\000\044\005\043\006\037" +
    "\007\046\010\047\012\165\013\053\015\027\016\055\017" +
    "\050\021\032\022\030\035\052\047\u01cf\055\036\057\044" +
    "\060\051\061\045\001\002\000\050\005\uff4a\006\uff4a\007" +
    "\uff4a\010\uff4a\012\uff4a\013\uff4a\015\uff4a\016\uff4a\017\uff4a" +
    "\021\uff4a\022\uff4a\034\uff4a\035\uff4a\037\uff4a\047\uff4a\055" +
    "\uff4a\057\uff4a\060\uff4a\061\uff4a\001\002\000\004\002\uffff" +
    "\001\002\000\004\044\u01d2\001\002\000\014\006\u01d6\007" +
    "\u01d8\016\u01d3\017\u01d5\045\u01d7\001\002\000\004\055\u01e9" +
    "\001\002\000\004\045\u01e5\001\002\000\004\055\u01e2\001" +
    "\002\000\004\055\u01df\001\002\000\004\046\u01dc\001\002" +
    "\000\004\055\u01d9\001\002\000\006\045\uffe2\054\u01da\001" +
    "\002\000\012\006\u01d6\007\u01d8\016\u01d3\017\u01d5\001\002" +
    "\000\004\045\uffde\001\002\000\040\005\043\006\037\007" +
    "\046\010\047\013\053\015\027\016\055\017\050\021\032" +
    "\022\030\035\052\055\036\057\044\060\051\061\045\001" +
    "\002\000\044\005\043\006\037\007\046\010\047\012\165" +
    "\013\053\015\027\016\055\017\050\021\032\022\030\035" +
    "\052\047\u01de\055\036\057\044\060\051\061\045\001\002" +
    "\000\012\002\uffec\006\uffec\052\uffec\061\uffec\001\002\000" +
    "\006\045\uffe4\054\u01e0\001\002\000\012\006\u01d6\007\u01d8" +
    "\016\u01d3\017\u01d5\001\002\000\004\045\uffe0\001\002\000" +
    "\006\045\uffe3\054\u01e3\001\002\000\012\006\u01d6\007\u01d8" +
    "\016\u01d3\017\u01d5\001\002\000\004\045\uffdf\001\002\000" +
    "\004\046\u01e6\001\002\000\040\005\043\006\037\007\046" +
    "\010\047\013\053\015\027\016\055\017\050\021\032\022" +
    "\030\035\052\055\036\057\044\060\051\061\045\001\002" +
    "\000\044\005\043\006\037\007\046\010\047\012\165\013" +
    "\053\015\027\016\055\017\050\021\032\022\030\035\052" +
    "\047\u01e8\055\036\057\044\060\051\061\045\001\002\000" +
    "\012\002\uffed\006\uffed\052\uffed\061\uffed\001\002\000\006" +
    "\045\uffe1\054\u01ea\001\002\000\012\006\u01d6\007\u01d8\016" +
    "\u01d3\017\u01d5\001\002\000\004\045\uffdd\001\002\000\004" +
    "\045\u01ed\001\002\000\004\046\u01ee\001\002\000\042\005" +
    "\043\006\037\007\046\010\047\013\053\015\027\016\055" +
    "\017\050\021\032\022\030\035\052\047\u01f0\055\036\057" +
    "\044\060\051\061\045\001\002\000\044\005\043\006\037" +
    "\007\046\010\047\012\165\013\053\015\027\016\055\017" +
    "\050\021\032\022\030\035\052\047\u01f1\055\036\057\044" +
    "\060\051\061\045\001\002\000\004\002\ufff8\001\002\000" +
    "\004\002\ufff6\001\002\000\004\046\u01f3\001\002\000\042" +
    "\005\043\006\037\007\046\010\047\013\053\015\027\016" +
    "\055\017\050\021\032\022\030\035\052\047\u01f5\055\036" +
    "\057\044\060\051\061\045\001\002\000\044\005\043\006" +
    "\037\007\046\010\047\012\165\013\053\015\027\016\055" +
    "\017\050\021\032\022\030\035\052\047\u01f7\055\036\057" +
    "\044\060\051\061\045\001\002\000\022\002\ufff4\006\ufff4" +
    "\007\ufff4\016\ufff4\017\ufff4\024\ufff4\052\ufff4\061\014\001" +
    "\002\000\020\002\ufff5\006\ufff5\007\ufff5\016\ufff5\017\ufff5" +
    "\024\ufff5\052\ufff5\001\002\000\022\002\ufff2\006\ufff2\007" +
    "\ufff2\016\ufff2\017\ufff2\024\ufff2\052\ufff2\061\014\001\002" +
    "\000\020\002\ufff3\006\ufff3\007\ufff3\016\ufff3\017\ufff3\024" +
    "\ufff3\052\ufff3\001\002\000\004\044\uffe9\001\002\000\004" +
    "\044\uffea\001\002\000\004\044\uffeb\001\002\000\004\002" +
    "\001\001\002\000\004\002\ufffb\001\002\000\006\006\022" +
    "\052\015\001\002\000\004\002\ufffd\001\002\000\004\044" +
    "\uffe8\001\002\000\014\006\u01d6\007\u01d8\016\u01d3\017\u01d5" +
    "\045\u0203\001\002\000\004\045\u0210\001\002\000\004\046" +
    "\u0204\001\002\000\042\005\043\006\037\007\046\010\047" +
    "\013\053\015\027\016\055\017\050\021\032\022\030\034" +
    "\u0207\035\052\055\036\057\044\060\051\061\045\001\002" +
    "\000\044\005\043\006\037\007\046\010\047\012\165\013" +
    "\053\015\027\016\055\017\050\021\032\022\030\034\u0207" +
    "\035\052\055\036\057\044\060\051\061\045\001\002\000" +
    "\004\047\u020d\001\002\000\032\005\043\006\037\007\046" +
    "\016\055\017\050\021\032\022\030\055\u0209\056\u020a\057" +
    "\044\060\051\061\045\001\002\000\004\047\uffe5\001\002" +
    "\000\010\025\u0159\044\u0158\053\u020c\001\002\000\004\053" +
    "\u020b\001\002\000\004\047\uffe6\001\002\000\004\047\uffe7" +
    "\001\002\000\012\002\uffee\006\uffee\052\uffee\061\uffee\001" +
    "\002\000\004\047\u020f\001\002\000\012\002\uffef\006\uffef" +
    "\052\uffef\061\uffef\001\002\000\004\046\u0211\001\002\000" +
    "\042\005\043\006\037\007\046\010\047\013\053\015\027" +
    "\016\055\017\050\021\032\022\030\034\u0207\035\052\055" +
    "\036\057\044\060\051\061\045\001\002\000\044\005\043" +
    "\006\037\007\046\010\047\012\165\013\053\015\027\016" +
    "\055\017\050\021\032\022\030\034\u0207\035\052\055\036" +
    "\057\044\060\051\061\045\001\002\000\004\047\u0214\001" +
    "\002\000\012\002\ufff0\006\ufff0\052\ufff0\061\ufff0\001\002" +
    "\000\004\047\u0216\001\002\000\012\002\ufff1\006\ufff1\052" +
    "\ufff1\061\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0214\000\014\002\007\010\006\011\004\023\016\030" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\u01fc\023\u01fd\030\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\020\011\017\001\001\000\002\001\001" +
    "\000\004\011\u01cf\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\032" +
    "\004\033\006\037\007\041\013\030\015\053\026\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\156\006\160\007\162\013" +
    "\155\014\163\015\165\026\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\122\001\001\000\002\001\001\000\004" +
    "\021\120\001\001\000\004\021\116\001\001\000\004\021" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\154\004\033\006\037\007\041" +
    "\013\030\015\053\026\034\001\001\000\020\004\156\006" +
    "\160\007\162\013\155\014\163\015\165\026\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\167\004\033\006\037\007\041\013\030\015\053" +
    "\026\034\001\001\000\020\004\156\006\160\007\162\013" +
    "\155\014\163\015\165\026\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\216\004\033\006" +
    "\037\007\041\013\030\015\053\024\217\026\034\001\001" +
    "\000\020\004\156\006\160\007\162\013\155\014\163\015" +
    "\165\026\157\001\001\000\004\025\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\216\004\033\006\037\007\041\013\030\015\053\024\224" +
    "\026\034\001\001\000\004\025\225\001\001\000\002\001" +
    "\001\000\020\003\227\004\033\006\037\007\041\013\030" +
    "\015\053\026\034\001\001\000\020\004\156\006\160\007" +
    "\162\013\155\014\163\015\165\026\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\270\001\001" +
    "\000\002\001\001\000\004\016\302\001\001\000\002\001" +
    "\001\000\020\003\274\004\033\006\037\007\041\013\030" +
    "\015\053\026\034\001\001\000\020\004\156\006\160\007" +
    "\162\013\155\014\163\015\165\026\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\300\004\033\006" +
    "\037\007\041\013\030\015\053\026\034\001\001\000\020" +
    "\004\156\006\160\007\162\013\155\014\163\015\165\026" +
    "\157\001\001\000\002\001\001\000\004\016\303\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\306\004" +
    "\033\006\037\007\041\013\030\015\053\026\034\001\001" +
    "\000\020\004\156\006\160\007\162\013\155\014\163\015" +
    "\165\026\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\317\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\u0116\001" +
    "\001\000\004\020\u0110\001\001\000\004\020\u010a\001\001" +
    "\000\004\020\326\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\347\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u014c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u0159\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\u0168\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u017a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\u018e\001\001\000\004\020\u018a\001\001\000\004" +
    "\020\u0186\001\001\000\004\020\u0182\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u01a0\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\u01b5\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\u01bc\001\001\000\002\001\001\000\004\005\u01be" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\u01c8\001\001\000\002\001\001\000\004\005\u01ca" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\u01cd\004\033\006\037\007\041\013\030\015\053\026\034" +
    "\001\001\000\020\004\156\006\160\007\162\013\155\014" +
    "\163\015\165\026\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\u01d3\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\u01da\001\001\000\002\001\001\000\020" +
    "\003\u01dc\004\033\006\037\007\041\013\030\015\053\026" +
    "\034\001\001\000\020\004\156\006\160\007\162\013\155" +
    "\014\163\015\165\026\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\u01e0\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\u01e3\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\u01e6\004\033\006\037" +
    "\007\041\013\030\015\053\026\034\001\001\000\020\004" +
    "\156\006\160\007\162\013\155\014\163\015\165\026\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\u01ea\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\u01ee\004\033\006\037\007\041\013" +
    "\030\015\053\026\034\001\001\000\020\004\156\006\160" +
    "\007\162\013\155\014\163\015\165\026\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\u01f3\004\033\006\037\007\041\013\030\015\053\026" +
    "\034\001\001\000\020\004\156\006\160\007\162\013\155" +
    "\014\163\015\165\026\157\001\001\000\004\010\u01f5\001" +
    "\001\000\002\001\001\000\004\010\u01f7\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\u01fe" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\u0201\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\u0204\004\033\006\037\007\041\013\030\015\053\022" +
    "\u0205\026\034\001\001\000\022\004\156\006\160\007\162" +
    "\013\155\014\163\015\165\022\u020d\026\157\001\001\000" +
    "\002\001\001\000\004\004\u0207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\u0211\004\033\006" +
    "\037\007\041\013\030\015\053\022\u0212\026\034\001\001" +
    "\000\022\004\156\006\160\007\162\013\155\014\163\015" +
    "\165\022\u0214\026\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // DECLARACION_SWITCH ::= SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SWITCH",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // SENTENCIA_SWITCH ::= Default Dos_p SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // SENTENCIA_SWITCH ::= Case Comillas Identificador Comillas Dos_p DECLARACION_SWITCH SENTENCIA_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // SENTENCIA_SWITCH ::= Case Numero Dos_p DECLARACION_SWITCH SENTENCIA_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // SENTENCIA_SWITCH ::= Case Comillas Identificador Comillas Dos_p DECLARACION_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // SENTENCIA_SWITCH ::= Case Numero Dos_p DECLARACION_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // SWITCH ::= Switch Parentesis_a Identificador Parentesis_c Llave_a SENTENCIA_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // SENTENCIA_FOR ::= Int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // SENTENCIA_BOOLEANA ::= Numero Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Op_logico SENTENCIA_BOOLEANA SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // OPERACION_C ::= Comilla Caracter Comilla Asterisco Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_C",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // OPERACION_C ::= Comilla Caracter Comilla Resta Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_C",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // OPERACION_C ::= Comilla Caracter Comilla Division Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_C",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // OPERACION_C ::= Comilla Caracter Comilla Suma Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_C",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // OPERACION_C ::= Identificador Asterisco OPERACION_S 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_C",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // OPERACION_C ::= Identificador Division OPERACION_S 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_C",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // OPERACION_C ::= Identificador Resta OPERACION_S 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_C",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // OPERACION_C ::= Identificador Suma OPERACION_S 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_C",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // OPERACION_C ::= Identificador Resta Comilla Caracter Comilla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_C",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // OPERACION_C ::= Identificador Division Comilla Caracter Comilla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_C",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // OPERACION_C ::= Identificador Asterisco Comilla Caracter Comilla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_C",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // OPERACION_C ::= Identificador Suma Comilla Caracter Comilla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_C",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // OPERACION_C ::= Comilla Caracter Comilla Suma Comilla Caracter Comilla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_C",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // OPERACION_C ::= Comilla Caracter Comilla Division Comilla Caracter Comilla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_C",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // OPERACION_C ::= Comilla Caracter Comilla Asterisco Comilla Caracter Comilla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_C",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OPERACION_C ::= Comilla Caracter Comilla Resta Comilla Caracter Comilla OPERACION_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_C",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OPERACION_S ::= Comillas Numero Comillas Asterisco Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OPERACION_S ::= Comillas Numero Comillas Resta Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OPERACION_S ::= Comillas Numero Comillas Division Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OPERACION_S ::= Comillas Numero Comillas Suma Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OPERACION_S ::= Identificador Resta Comillas Numero Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OPERACION_S ::= Identificador Division Comillas Numero Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OPERACION_S ::= Identificador Asterisco Comillas Numero Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OPERACION_S ::= Identificador Suma Comillas Numero Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OPERACION_S ::= Comillas Numero Comillas Suma Comillas Numero Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OPERACION_S ::= Comillas Numero Comillas Division Comillas Numero Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OPERACION_S ::= Comillas Numero Comillas Asterisco Comillas Numero Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OPERACION_S ::= Comillas Numero Comillas Resta Comillas Numero Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OPERACION_S ::= Identificador Asterisco OPERACION_S 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OPERACION_S ::= Identificador Division OPERACION_S 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OPERACION_S ::= Identificador Resta OPERACION_S 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OPERACION_S ::= Identificador Suma OPERACION_S 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OPERACION_S ::= Comillas Identificador Comillas Asterisco Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OPERACION_S ::= Comillas Identificador Comillas Resta Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OPERACION_S ::= Comillas Identificador Comillas Division Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OPERACION_S ::= Comillas Identificador Comillas Suma Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OPERACION_S ::= Identificador Resta Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPERACION_S ::= Identificador Division Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPERACION_S ::= Identificador Asterisco Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPERACION_S ::= Identificador Suma Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPERACION_S ::= Comillas Identificador Comillas Suma Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPERACION_S ::= Comillas Identificador Comillas Division Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPERACION_S ::= Comillas Identificador Comillas Asterisco Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OPERACION_S ::= Comillas Identificador Comillas Resta Comillas Identificador Comillas OPERACION_S 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OPERACION_I ::= Identificador Asterisco OPERACION_I 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_I",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPERACION_I ::= Identificador Division OPERACION_I 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_I",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OPERACION_I ::= Identificador Resta OPERACION_I 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_I",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPERACION_I ::= Identificador Suma OPERACION_I 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_I",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OPERACION_I ::= Numero Asterisco Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_I",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OPERACION_I ::= Numero Resta Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_I",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OPERACION_I ::= Numero Division Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_I",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OPERACION_I ::= Numero Suma Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_I",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OPERACION_I ::= Identificador Resta Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_I",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OPERACION_I ::= Identificador Division Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_I",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OPERACION_I ::= Identificador Asterisco Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_I",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OPERACION_I ::= Identificador Suma Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_I",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OPERACION_I ::= Numero Suma Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_I",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OPERACION_I ::= Numero Division Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_I",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPERACION_I ::= Numero Asterisco Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_I",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OPERACION_I ::= Numero Resta Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_I",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DECLARACION ::= Cout Op_relacional Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLARACION ::= Cout Op_relacional Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DECLARACION ::= Cin Op_relacional Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DECLARACION ::= Char Identificador Igual Comilla Caracter Comilla P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DECLARACION ::= Char Identificador Op_atribucion Comilla Caracter Comilla P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DECLARACION ::= Char Identificador Igual OPERACION_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DECLARACION ::= Char Identificador Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DECLARACION ::= Char Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLARACION ::= Identificador Igual OPERACION_S P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DECLARACION ::= Cadena Identificador Igual OPERACION_S P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECLARACION ::= Cadena Identificador Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DECLARACION ::= Cadena Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECLARACION ::= Float Identificador Igual OPERACION_I P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECLARACION ::= Float Asterisco Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLARACION ::= Float Identificador Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLARACION ::= Float Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLARACION ::= Float Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARACION ::= Float Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLARACION ::= Float Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARACION ::= Float Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARACION ::= Float Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION ::= Long Identificador Igual OPERACION_I P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION ::= Long Asterisco Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION ::= Long Identificador Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION ::= Long Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION ::= Long Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION ::= Long Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION ::= Long Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION ::= Long Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= Long Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= DOuble Identificador Igual OPERACION_I P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= DOuble Asterisco Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= DOuble Identificador Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= DOuble Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= DOuble Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= DOuble Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= DOuble Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= DOuble Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= DOuble Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= Int Identificador Igual OPERACION_I P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= Int Asterisco Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= Int Identificador Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= Int Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= T_dato Asterisco Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= T_dato Identificador Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= T_dato Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= Identificador Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Struct Punto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMETROS ::= Long Identificador Coma PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMETROS ::= Cadena Identificador Coma PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMETROS ::= DOuble Identificador Coma PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMETROS ::= Int Identificador Coma PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMETROS ::= Long Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMETROS ::= Cadena Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMETROS ::= DOuble Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMETROS ::= Int Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RETURN ::= Return DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RETURN ::= Return Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RETURN ::= Return Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO_FUNCION ::= Cadena Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_FUNCION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO_FUNCION ::= DOuble Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_FUNCION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO_FUNCION ::= Long Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_FUNCION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO_FUNCION ::= Int Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_FUNCION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCION ::= Void Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCION ::= Void Identificador Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCION ::= TIPO_FUNCION Parentesis_a Parentesis_c Llave_a RETURN Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCION ::= TIPO_FUNCION Parentesis_a Parentesis_c Llave_a SENTENCIA RETURN Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCION ::= TIPO_FUNCION Parentesis_a PARAMETROS Parentesis_c Llave_a RETURN Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCION ::= TIPO_FUNCION Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIA RETURN Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STRUCT ::= Struct Identificador Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STRUCT ::= Struct Identificador Llave_a SENTENCIA Llave_c STRUCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STRUCT ::= Struct Identificador Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STRUCT ::= Struct Identificador Llave_a Llave_c STRUCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MAIN ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MAIN ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MAIN ::= Main Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MAIN ::= Int Main Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= STRUCT MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= STRUCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= STRUCT FUNCION MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= FUNCION MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= FUNCION STRUCT MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

